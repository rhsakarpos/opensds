// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CreateVolumeOpts is a structure which indicates all required properties
// for creating a volume.
type CreateVolumeOpts struct {
	// The uuid of the volume, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the volume, required.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The requested capacity of the volume, required.
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The description of the volume, optional.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// When create volume from snapshot, this field is required.
	SnapshotId string `protobuf:"bytes,5,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
	// The locality that volume belongs to, required.
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,7,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The name of the pool on which volume will be created, required.
	PoolName string `protobuf:"bytes,9,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// The metadata of the volume, optional.
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,11,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`
	// The replication driver data
	ReplicationDriverData map[string]string `protobuf:"bytes,13,rep,name=replicationDriverData,proto3" json:"replicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The uuid of replication
	ReplicationId string `protobuf:"bytes,14,opt,name=replicationId,proto3" json:"replicationId,omitempty"`
	// The size of snapshot
	SnapshotSize int64 `protobuf:"varint,15,opt,name=snapshotSize,proto3" json:"snapshotSize,omitempty"`
	// Down load snapshot from cloud
	SnapshotFromCloud    bool     `protobuf:"varint,16,opt,name=snapshotFromCloud,proto3" json:"snapshotFromCloud,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVolumeOpts) Reset()         { *m = CreateVolumeOpts{} }
func (m *CreateVolumeOpts) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeOpts) ProtoMessage()    {}
func (*CreateVolumeOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}

func (m *CreateVolumeOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeOpts.Unmarshal(m, b)
}
func (m *CreateVolumeOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeOpts.Marshal(b, m, deterministic)
}
func (m *CreateVolumeOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeOpts.Merge(m, src)
}
func (m *CreateVolumeOpts) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeOpts.Size(m)
}
func (m *CreateVolumeOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeOpts proto.InternalMessageInfo

func (m *CreateVolumeOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateVolumeOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVolumeOpts) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CreateVolumeOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateVolumeOpts) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *CreateVolumeOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *CreateVolumeOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *CreateVolumeOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *CreateVolumeOpts) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *CreateVolumeOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateVolumeOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *CreateVolumeOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CreateVolumeOpts) GetReplicationDriverData() map[string]string {
	if m != nil {
		return m.ReplicationDriverData
	}
	return nil
}

func (m *CreateVolumeOpts) GetReplicationId() string {
	if m != nil {
		return m.ReplicationId
	}
	return ""
}

func (m *CreateVolumeOpts) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return 0
}

func (m *CreateVolumeOpts) GetSnapshotFromCloud() bool {
	if m != nil {
		return m.SnapshotFromCloud
	}
	return false
}

// DeleteVolumeOpts is a structure which indicates all required properties
// for deleting a volume.
type DeleteVolumeOpts struct {
	// The uuid of the volume, required.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,2,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,3,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The metadata of the volume, optional.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,5,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context              string   `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeOpts) Reset()         { *m = DeleteVolumeOpts{} }
func (m *DeleteVolumeOpts) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeOpts) ProtoMessage()    {}
func (*DeleteVolumeOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}

func (m *DeleteVolumeOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeOpts.Unmarshal(m, b)
}
func (m *DeleteVolumeOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeOpts.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeOpts.Merge(m, src)
}
func (m *DeleteVolumeOpts) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeOpts.Size(m)
}
func (m *DeleteVolumeOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeOpts proto.InternalMessageInfo

func (m *DeleteVolumeOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteVolumeOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *DeleteVolumeOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *DeleteVolumeOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeleteVolumeOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DeleteVolumeOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// ExtendVolumeOpts is a structure which indicates all required properties
// for Extending a volume.
type ExtendVolumeOpts struct {
	// The uuid of the volume, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the volume, required.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The requested capacity of the volume, required.
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The description of the volume, optional.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// When create volume from snapshot, this field is required.
	SnapshotId string `protobuf:"bytes,5,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
	// The locality that volume belongs to, required.
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,7,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The name of the pool on which volume will be created, required.
	PoolName string `protobuf:"bytes,9,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// The metadata of the volume, optional.
	Metadata map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,11,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context              string   `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtendVolumeOpts) Reset()         { *m = ExtendVolumeOpts{} }
func (m *ExtendVolumeOpts) String() string { return proto.CompactTextString(m) }
func (*ExtendVolumeOpts) ProtoMessage()    {}
func (*ExtendVolumeOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}

func (m *ExtendVolumeOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendVolumeOpts.Unmarshal(m, b)
}
func (m *ExtendVolumeOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendVolumeOpts.Marshal(b, m, deterministic)
}
func (m *ExtendVolumeOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendVolumeOpts.Merge(m, src)
}
func (m *ExtendVolumeOpts) XXX_Size() int {
	return xxx_messageInfo_ExtendVolumeOpts.Size(m)
}
func (m *ExtendVolumeOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendVolumeOpts.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendVolumeOpts proto.InternalMessageInfo

func (m *ExtendVolumeOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExtendVolumeOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExtendVolumeOpts) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ExtendVolumeOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ExtendVolumeOpts) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *ExtendVolumeOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *ExtendVolumeOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *ExtendVolumeOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *ExtendVolumeOpts) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *ExtendVolumeOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ExtendVolumeOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *ExtendVolumeOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// CreateVolumeSnapshotOpts is a structure which indicates all required
// properties for creating a volume snapshot.
type CreateVolumeSnapshotOpts struct {
	// The uuid of the volume snapshot, optional.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the volume snapshot, required.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The size of the volume that snapshot belongs to, required.
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The description of the volume snapshot, optional.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The uuid of the volume that snapshot belongs to, required.
	VolumeId string `protobuf:"bytes,5,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,6,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The metadata of the volume snapshot, optional.
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,8,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context              string   `protobuf:"bytes,9,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVolumeSnapshotOpts) Reset()         { *m = CreateVolumeSnapshotOpts{} }
func (m *CreateVolumeSnapshotOpts) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeSnapshotOpts) ProtoMessage()    {}
func (*CreateVolumeSnapshotOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}

func (m *CreateVolumeSnapshotOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeSnapshotOpts.Unmarshal(m, b)
}
func (m *CreateVolumeSnapshotOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeSnapshotOpts.Marshal(b, m, deterministic)
}
func (m *CreateVolumeSnapshotOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeSnapshotOpts.Merge(m, src)
}
func (m *CreateVolumeSnapshotOpts) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeSnapshotOpts.Size(m)
}
func (m *CreateVolumeSnapshotOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeSnapshotOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeSnapshotOpts proto.InternalMessageInfo

func (m *CreateVolumeSnapshotOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateVolumeSnapshotOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVolumeSnapshotOpts) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CreateVolumeSnapshotOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateVolumeSnapshotOpts) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *CreateVolumeSnapshotOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *CreateVolumeSnapshotOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateVolumeSnapshotOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *CreateVolumeSnapshotOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// DeleteVolumeSnapshotOpts is a structure which indicates all required
// properties for deleting a volume snapshot.
type DeleteVolumeSnapshotOpts struct {
	// The uuid of the volume snapshot, required.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The uuid of the volume that snapshot belongs to, required.
	VolumeId string `protobuf:"bytes,2,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
	// The metadata of the volume snapshot, optional.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,4,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context              string   `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeSnapshotOpts) Reset()         { *m = DeleteVolumeSnapshotOpts{} }
func (m *DeleteVolumeSnapshotOpts) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeSnapshotOpts) ProtoMessage()    {}
func (*DeleteVolumeSnapshotOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{4}
}

func (m *DeleteVolumeSnapshotOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeSnapshotOpts.Unmarshal(m, b)
}
func (m *DeleteVolumeSnapshotOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeSnapshotOpts.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeSnapshotOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeSnapshotOpts.Merge(m, src)
}
func (m *DeleteVolumeSnapshotOpts) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeSnapshotOpts.Size(m)
}
func (m *DeleteVolumeSnapshotOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeSnapshotOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeSnapshotOpts proto.InternalMessageInfo

func (m *DeleteVolumeSnapshotOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteVolumeSnapshotOpts) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *DeleteVolumeSnapshotOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeleteVolumeSnapshotOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DeleteVolumeSnapshotOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// CreateVolumeAttachmentOpts is a structure which indicates all required
// properties for creating a volume attachment.
type CreateVolumeAttachmentOpts struct {
	// The uuid of the volume attachment, optional.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The uuid of the volume, required.
	VolumeId string `protobuf:"bytes,2,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
	// This field indicates if the volume is attached locally, optional.
	DoLocalAttach bool `protobuf:"varint,3,opt,name=doLocalAttach,proto3" json:"doLocalAttach,omitempty"`
	// This field indicates if the volume is attached multiple times, optional.
	MultiPath bool `protobuf:"varint,4,opt,name=multiPath,proto3" json:"multiPath,omitempty"`
	// The infomation of the host node on which the volume will be attached.
	HostInfo *HostInfo `protobuf:"bytes,5,opt,name=hostInfo,proto3" json:"hostInfo,omitempty"`
	// The metadata of the volume attachment, optional.
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,7,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,8,opt,name=context,proto3" json:"context,omitempty"`
	// The protocol
	AccessProtocol       string   `protobuf:"bytes,9,opt,name=AccessProtocol,proto3" json:"AccessProtocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVolumeAttachmentOpts) Reset()         { *m = CreateVolumeAttachmentOpts{} }
func (m *CreateVolumeAttachmentOpts) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeAttachmentOpts) ProtoMessage()    {}
func (*CreateVolumeAttachmentOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{5}
}

func (m *CreateVolumeAttachmentOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeAttachmentOpts.Unmarshal(m, b)
}
func (m *CreateVolumeAttachmentOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeAttachmentOpts.Marshal(b, m, deterministic)
}
func (m *CreateVolumeAttachmentOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeAttachmentOpts.Merge(m, src)
}
func (m *CreateVolumeAttachmentOpts) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeAttachmentOpts.Size(m)
}
func (m *CreateVolumeAttachmentOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeAttachmentOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeAttachmentOpts proto.InternalMessageInfo

func (m *CreateVolumeAttachmentOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateVolumeAttachmentOpts) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *CreateVolumeAttachmentOpts) GetDoLocalAttach() bool {
	if m != nil {
		return m.DoLocalAttach
	}
	return false
}

func (m *CreateVolumeAttachmentOpts) GetMultiPath() bool {
	if m != nil {
		return m.MultiPath
	}
	return false
}

func (m *CreateVolumeAttachmentOpts) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

func (m *CreateVolumeAttachmentOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateVolumeAttachmentOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *CreateVolumeAttachmentOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CreateVolumeAttachmentOpts) GetAccessProtocol() string {
	if m != nil {
		return m.AccessProtocol
	}
	return ""
}

// DeleteVolumeAttachmentOpts is a structure which indicates all required
// properties for deleting a volume attachment.
type DeleteVolumeAttachmentOpts struct {
	// The uuid of the volume attachment, optional.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The uuid of the volume, required.
	VolumeId string `protobuf:"bytes,2,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
	// The infomation of the host node on which the volume will be attached.
	HostInfo *HostInfo `protobuf:"bytes,3,opt,name=hostInfo,proto3" json:"hostInfo,omitempty"`
	// The metadata of the volume attachment, optional.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,5,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	// The protocol
	AccessProtocol       string   `protobuf:"bytes,7,opt,name=AccessProtocol,proto3" json:"AccessProtocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeAttachmentOpts) Reset()         { *m = DeleteVolumeAttachmentOpts{} }
func (m *DeleteVolumeAttachmentOpts) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeAttachmentOpts) ProtoMessage()    {}
func (*DeleteVolumeAttachmentOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{6}
}

func (m *DeleteVolumeAttachmentOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeAttachmentOpts.Unmarshal(m, b)
}
func (m *DeleteVolumeAttachmentOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeAttachmentOpts.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeAttachmentOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeAttachmentOpts.Merge(m, src)
}
func (m *DeleteVolumeAttachmentOpts) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeAttachmentOpts.Size(m)
}
func (m *DeleteVolumeAttachmentOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeAttachmentOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeAttachmentOpts proto.InternalMessageInfo

func (m *DeleteVolumeAttachmentOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteVolumeAttachmentOpts) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *DeleteVolumeAttachmentOpts) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

func (m *DeleteVolumeAttachmentOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeleteVolumeAttachmentOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DeleteVolumeAttachmentOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *DeleteVolumeAttachmentOpts) GetAccessProtocol() string {
	if m != nil {
		return m.AccessProtocol
	}
	return ""
}

// CreateSnapshotAttachmentOpts is a structure which indicates all required
// properties for creating a snapshot attachment.
type CreateSnapshotAttachmentOpts struct {
	// The uuid of the snapshot attachment, optional.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The uuid of the snapshot, required.
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
	// This field indicates if the snapshot is attached locally, optional.
	DoLocalAttach bool `protobuf:"varint,3,opt,name=doLocalAttach,proto3" json:"doLocalAttach,omitempty"`
	// This field indicates if the snapshot is attached multiple times, optional.
	MultiPath bool `protobuf:"varint,4,opt,name=multiPath,proto3" json:"multiPath,omitempty"`
	// The infomation of the host node on which the snapshot will be attached.
	HostInfo *HostInfo `protobuf:"bytes,5,opt,name=hostInfo,proto3" json:"hostInfo,omitempty"`
	// The metadata of the snapshot attachment, optional.
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,7,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,8,opt,name=context,proto3" json:"context,omitempty"`
	// The protocol
	AccessProtocol       string   `protobuf:"bytes,9,opt,name=AccessProtocol,proto3" json:"AccessProtocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSnapshotAttachmentOpts) Reset()         { *m = CreateSnapshotAttachmentOpts{} }
func (m *CreateSnapshotAttachmentOpts) String() string { return proto.CompactTextString(m) }
func (*CreateSnapshotAttachmentOpts) ProtoMessage()    {}
func (*CreateSnapshotAttachmentOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{7}
}

func (m *CreateSnapshotAttachmentOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSnapshotAttachmentOpts.Unmarshal(m, b)
}
func (m *CreateSnapshotAttachmentOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSnapshotAttachmentOpts.Marshal(b, m, deterministic)
}
func (m *CreateSnapshotAttachmentOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSnapshotAttachmentOpts.Merge(m, src)
}
func (m *CreateSnapshotAttachmentOpts) XXX_Size() int {
	return xxx_messageInfo_CreateSnapshotAttachmentOpts.Size(m)
}
func (m *CreateSnapshotAttachmentOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSnapshotAttachmentOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSnapshotAttachmentOpts proto.InternalMessageInfo

func (m *CreateSnapshotAttachmentOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateSnapshotAttachmentOpts) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *CreateSnapshotAttachmentOpts) GetDoLocalAttach() bool {
	if m != nil {
		return m.DoLocalAttach
	}
	return false
}

func (m *CreateSnapshotAttachmentOpts) GetMultiPath() bool {
	if m != nil {
		return m.MultiPath
	}
	return false
}

func (m *CreateSnapshotAttachmentOpts) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

func (m *CreateSnapshotAttachmentOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateSnapshotAttachmentOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *CreateSnapshotAttachmentOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CreateSnapshotAttachmentOpts) GetAccessProtocol() string {
	if m != nil {
		return m.AccessProtocol
	}
	return ""
}

// DeleteSnapshotAttachmentOpts is a structure which indicates all required
// properties for deleting a snapshot attachment.
type DeleteSnapshotAttachmentOpts struct {
	// The uuid of the snapshot attachment, optional.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The uuid of the snapshot, required.
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
	// The infomation of the host node on which the volume will be attached.
	HostInfo *HostInfo `protobuf:"bytes,3,opt,name=hostInfo,proto3" json:"hostInfo,omitempty"`
	// The metadata of the snapshot attachment, optional.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The storage driver type.
	DriverName string `protobuf:"bytes,5,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	// The protocol
	AccessProtocol       string   `protobuf:"bytes,7,opt,name=AccessProtocol,proto3" json:"AccessProtocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSnapshotAttachmentOpts) Reset()         { *m = DeleteSnapshotAttachmentOpts{} }
func (m *DeleteSnapshotAttachmentOpts) String() string { return proto.CompactTextString(m) }
func (*DeleteSnapshotAttachmentOpts) ProtoMessage()    {}
func (*DeleteSnapshotAttachmentOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{8}
}

func (m *DeleteSnapshotAttachmentOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSnapshotAttachmentOpts.Unmarshal(m, b)
}
func (m *DeleteSnapshotAttachmentOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSnapshotAttachmentOpts.Marshal(b, m, deterministic)
}
func (m *DeleteSnapshotAttachmentOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSnapshotAttachmentOpts.Merge(m, src)
}
func (m *DeleteSnapshotAttachmentOpts) XXX_Size() int {
	return xxx_messageInfo_DeleteSnapshotAttachmentOpts.Size(m)
}
func (m *DeleteSnapshotAttachmentOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSnapshotAttachmentOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSnapshotAttachmentOpts proto.InternalMessageInfo

func (m *DeleteSnapshotAttachmentOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteSnapshotAttachmentOpts) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *DeleteSnapshotAttachmentOpts) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

func (m *DeleteSnapshotAttachmentOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeleteSnapshotAttachmentOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DeleteSnapshotAttachmentOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *DeleteSnapshotAttachmentOpts) GetAccessProtocol() string {
	if m != nil {
		return m.AccessProtocol
	}
	return ""
}

type HostInfo struct {
	// The platform of the host, such as "x86_64"
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// The type of OS, such as "linux","windows", etc.
	OsType string `protobuf:"bytes,2,opt,name=osType,proto3" json:"osType,omitempty"`
	// The name of the host
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// The ip address of the host
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	// The initiator infomation, such as: "iqn.2017.com.redhat:e08039b48d5c"
	Initiator            string   `protobuf:"bytes,5,opt,name=initiator,proto3" json:"initiator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostInfo) Reset()         { *m = HostInfo{} }
func (m *HostInfo) String() string { return proto.CompactTextString(m) }
func (*HostInfo) ProtoMessage()    {}
func (*HostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{9}
}

func (m *HostInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostInfo.Unmarshal(m, b)
}
func (m *HostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostInfo.Marshal(b, m, deterministic)
}
func (m *HostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfo.Merge(m, src)
}
func (m *HostInfo) XXX_Size() int {
	return xxx_messageInfo_HostInfo.Size(m)
}
func (m *HostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfo proto.InternalMessageInfo

func (m *HostInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *HostInfo) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *HostInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HostInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HostInfo) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

type VolumeData struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VolumeData) Reset()         { *m = VolumeData{} }
func (m *VolumeData) String() string { return proto.CompactTextString(m) }
func (*VolumeData) ProtoMessage()    {}
func (*VolumeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{10}
}

func (m *VolumeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeData.Unmarshal(m, b)
}
func (m *VolumeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeData.Marshal(b, m, deterministic)
}
func (m *VolumeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeData.Merge(m, src)
}
func (m *VolumeData) XXX_Size() int {
	return xxx_messageInfo_VolumeData.Size(m)
}
func (m *VolumeData) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeData.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeData proto.InternalMessageInfo

func (m *VolumeData) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// CreateReplicationOpts is a structure which indicates all required properties
// for creating a replication.
// NOTE: Need to figure out how to handle more than 2 sites.
type CreateReplicationOpts struct {
	// The uuid of the replication, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the replication, optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the replication, optional.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The uuid of the primary volume. This field is required.
	PrimaryVolumeId string `protobuf:"bytes,4,opt,name=primaryVolumeId,proto3" json:"primaryVolumeId,omitempty"`
	// The uuid of the secondary volume. This field is required.
	SecondaryVolumeId string `protobuf:"bytes,5,opt,name=secondaryVolumeId,proto3" json:"secondaryVolumeId,omitempty"`
	// The dock infomation on which the request will be executed
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,7,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The name of the pool on which volume will be created, required.
	PoolName string `protobuf:"bytes,9,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// The metadata of the primary replication, optional.
	PrimaryReplicationDriverData map[string]string `protobuf:"bytes,11,rep,name=primaryReplicationDriverData,proto3" json:"primaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The metadata of the seondary replication, optional.
	SecondaryReplicationDriverData map[string]string `protobuf:"bytes,12,rep,name=secondaryReplicationDriverData,proto3" json:"secondaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The dock id.
	DockId string `protobuf:"bytes,13,opt,name=dockId,proto3" json:"dockId,omitempty"`
	// The replication driver type.
	DriverName string `protobuf:"bytes,14,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	// Whether is primary replication
	IsPrimary bool `protobuf:"varint,16,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`
	// The replication metadata
	Metadata map[string]string `protobuf:"bytes,17,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The volume data list
	VolumeDataList []*VolumeData `protobuf:"bytes,18,rep,name=volumeDataList,proto3" json:"volumeDataList,omitempty"`
	//the replication mode sync/async
	ReplicationMode string `protobuf:"bytes,19,opt,name=replicationMode,proto3" json:"replicationMode,omitempty"`
	// 0 means sync replication.
	ReplicationPeriod int64 `protobuf:"varint,20,opt,name=ReplicationPeriod,proto3" json:"ReplicationPeriod,omitempty"`
	// replication bandwidth
	ReplicationBandwidth int64    `protobuf:"varint,21,opt,name=ReplicationBandwidth,proto3" json:"ReplicationBandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReplicationOpts) Reset()         { *m = CreateReplicationOpts{} }
func (m *CreateReplicationOpts) String() string { return proto.CompactTextString(m) }
func (*CreateReplicationOpts) ProtoMessage()    {}
func (*CreateReplicationOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{11}
}

func (m *CreateReplicationOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateReplicationOpts.Unmarshal(m, b)
}
func (m *CreateReplicationOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateReplicationOpts.Marshal(b, m, deterministic)
}
func (m *CreateReplicationOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReplicationOpts.Merge(m, src)
}
func (m *CreateReplicationOpts) XXX_Size() int {
	return xxx_messageInfo_CreateReplicationOpts.Size(m)
}
func (m *CreateReplicationOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReplicationOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReplicationOpts proto.InternalMessageInfo

func (m *CreateReplicationOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateReplicationOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateReplicationOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateReplicationOpts) GetPrimaryVolumeId() string {
	if m != nil {
		return m.PrimaryVolumeId
	}
	return ""
}

func (m *CreateReplicationOpts) GetSecondaryVolumeId() string {
	if m != nil {
		return m.SecondaryVolumeId
	}
	return ""
}

func (m *CreateReplicationOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *CreateReplicationOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *CreateReplicationOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *CreateReplicationOpts) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *CreateReplicationOpts) GetPrimaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.PrimaryReplicationDriverData
	}
	return nil
}

func (m *CreateReplicationOpts) GetSecondaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.SecondaryReplicationDriverData
	}
	return nil
}

func (m *CreateReplicationOpts) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *CreateReplicationOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *CreateReplicationOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CreateReplicationOpts) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *CreateReplicationOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateReplicationOpts) GetVolumeDataList() []*VolumeData {
	if m != nil {
		return m.VolumeDataList
	}
	return nil
}

func (m *CreateReplicationOpts) GetReplicationMode() string {
	if m != nil {
		return m.ReplicationMode
	}
	return ""
}

func (m *CreateReplicationOpts) GetReplicationPeriod() int64 {
	if m != nil {
		return m.ReplicationPeriod
	}
	return 0
}

func (m *CreateReplicationOpts) GetReplicationBandwidth() int64 {
	if m != nil {
		return m.ReplicationBandwidth
	}
	return 0
}

// Delete ReplicationOpts is a structure which indicates all required properties
// for deleting a replication.
// NOTE: Need to figure out how to handle more than 2 sites.
type DeleteReplicationOpts struct {
	// The uuid of the replication, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the replication, optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the replication, optional.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The uuid of the primary volume. This field is required.
	PrimaryVolumeId string `protobuf:"bytes,4,opt,name=primaryVolumeId,proto3" json:"primaryVolumeId,omitempty"`
	// The uuid of the secondary volume. This field is required.
	SecondaryVolumeId string `protobuf:"bytes,5,opt,name=secondaryVolumeId,proto3" json:"secondaryVolumeId,omitempty"`
	// The dock infomation on which the request will be executed
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,7,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The name of the pool on which volume will be created, required.
	PoolName string `protobuf:"bytes,9,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// The metadata of the primary replication, optional.
	PrimaryReplicationDriverData map[string]string `protobuf:"bytes,11,rep,name=primaryReplicationDriverData,proto3" json:"primaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The metadata of the seondary replication, optional.
	SecondaryReplicationDriverData map[string]string `protobuf:"bytes,12,rep,name=secondaryReplicationDriverData,proto3" json:"secondaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The dock id.
	DockId string `protobuf:"bytes,13,opt,name=dockId,proto3" json:"dockId,omitempty"`
	// The replication driver type.
	DriverName string `protobuf:"bytes,14,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	// The replication metadata
	Metadata map[string]string `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether is primary replication
	IsPrimary            bool     `protobuf:"varint,17,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReplicationOpts) Reset()         { *m = DeleteReplicationOpts{} }
func (m *DeleteReplicationOpts) String() string { return proto.CompactTextString(m) }
func (*DeleteReplicationOpts) ProtoMessage()    {}
func (*DeleteReplicationOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{12}
}

func (m *DeleteReplicationOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReplicationOpts.Unmarshal(m, b)
}
func (m *DeleteReplicationOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReplicationOpts.Marshal(b, m, deterministic)
}
func (m *DeleteReplicationOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReplicationOpts.Merge(m, src)
}
func (m *DeleteReplicationOpts) XXX_Size() int {
	return xxx_messageInfo_DeleteReplicationOpts.Size(m)
}
func (m *DeleteReplicationOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReplicationOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReplicationOpts proto.InternalMessageInfo

func (m *DeleteReplicationOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteReplicationOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteReplicationOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DeleteReplicationOpts) GetPrimaryVolumeId() string {
	if m != nil {
		return m.PrimaryVolumeId
	}
	return ""
}

func (m *DeleteReplicationOpts) GetSecondaryVolumeId() string {
	if m != nil {
		return m.SecondaryVolumeId
	}
	return ""
}

func (m *DeleteReplicationOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *DeleteReplicationOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *DeleteReplicationOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *DeleteReplicationOpts) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *DeleteReplicationOpts) GetPrimaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.PrimaryReplicationDriverData
	}
	return nil
}

func (m *DeleteReplicationOpts) GetSecondaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.SecondaryReplicationDriverData
	}
	return nil
}

func (m *DeleteReplicationOpts) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *DeleteReplicationOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DeleteReplicationOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *DeleteReplicationOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeleteReplicationOpts) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

// Delete ReplicationOpts is a structure which indicates all required properties
type EnableReplicationOpts struct {
	// The uuid of the replication, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the replication, optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the replication, optional.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The uuid of the primary volume. This field is required.
	PrimaryVolumeId string `protobuf:"bytes,4,opt,name=primaryVolumeId,proto3" json:"primaryVolumeId,omitempty"`
	// The uuid of the secondary volume. This field is required.
	SecondaryVolumeId string `protobuf:"bytes,5,opt,name=secondaryVolumeId,proto3" json:"secondaryVolumeId,omitempty"`
	// The dock infomation on which the request will be executed
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,7,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The name of the pool on which volume will be created, required.
	PoolName string `protobuf:"bytes,9,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// The metadata of the primary replication, optional.
	PrimaryReplicationDriverData map[string]string `protobuf:"bytes,11,rep,name=primaryReplicationDriverData,proto3" json:"primaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The metadata of the seondary replication, optional.
	SecondaryReplicationDriverData map[string]string `protobuf:"bytes,12,rep,name=secondaryReplicationDriverData,proto3" json:"secondaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The dock id.
	DockId string `protobuf:"bytes,13,opt,name=dockId,proto3" json:"dockId,omitempty"`
	// The replication driver type.
	DriverName string `protobuf:"bytes,14,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	// The replication metadata
	Metadata map[string]string `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether is primary replication
	IsPrimary            bool     `protobuf:"varint,17,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableReplicationOpts) Reset()         { *m = EnableReplicationOpts{} }
func (m *EnableReplicationOpts) String() string { return proto.CompactTextString(m) }
func (*EnableReplicationOpts) ProtoMessage()    {}
func (*EnableReplicationOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{13}
}

func (m *EnableReplicationOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableReplicationOpts.Unmarshal(m, b)
}
func (m *EnableReplicationOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableReplicationOpts.Marshal(b, m, deterministic)
}
func (m *EnableReplicationOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableReplicationOpts.Merge(m, src)
}
func (m *EnableReplicationOpts) XXX_Size() int {
	return xxx_messageInfo_EnableReplicationOpts.Size(m)
}
func (m *EnableReplicationOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableReplicationOpts.DiscardUnknown(m)
}

var xxx_messageInfo_EnableReplicationOpts proto.InternalMessageInfo

func (m *EnableReplicationOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EnableReplicationOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnableReplicationOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EnableReplicationOpts) GetPrimaryVolumeId() string {
	if m != nil {
		return m.PrimaryVolumeId
	}
	return ""
}

func (m *EnableReplicationOpts) GetSecondaryVolumeId() string {
	if m != nil {
		return m.SecondaryVolumeId
	}
	return ""
}

func (m *EnableReplicationOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *EnableReplicationOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *EnableReplicationOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *EnableReplicationOpts) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *EnableReplicationOpts) GetPrimaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.PrimaryReplicationDriverData
	}
	return nil
}

func (m *EnableReplicationOpts) GetSecondaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.SecondaryReplicationDriverData
	}
	return nil
}

func (m *EnableReplicationOpts) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *EnableReplicationOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *EnableReplicationOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *EnableReplicationOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EnableReplicationOpts) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

// Delete ReplicationOpts is a structure which indicates all required properties
type DisableReplicationOpts struct {
	// The uuid of the replication, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the replication, optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the replication, optional.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The uuid of the primary volume. This field is required.
	PrimaryVolumeId string `protobuf:"bytes,4,opt,name=primaryVolumeId,proto3" json:"primaryVolumeId,omitempty"`
	// The uuid of the secondary volume. This field is required.
	SecondaryVolumeId string `protobuf:"bytes,5,opt,name=secondaryVolumeId,proto3" json:"secondaryVolumeId,omitempty"`
	// The dock infomation on which the request will be executed
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,7,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The name of the pool on which volume will be created, required.
	PoolName string `protobuf:"bytes,9,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// The metadata of the primary replication, optional.
	PrimaryReplicationDriverData map[string]string `protobuf:"bytes,11,rep,name=primaryReplicationDriverData,proto3" json:"primaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The metadata of the seondary replication, optional.
	SecondaryReplicationDriverData map[string]string `protobuf:"bytes,12,rep,name=secondaryReplicationDriverData,proto3" json:"secondaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The dock id.
	DockId string `protobuf:"bytes,13,opt,name=dockId,proto3" json:"dockId,omitempty"`
	// The replication driver type.
	DriverName string `protobuf:"bytes,14,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	// The replication metadata
	Metadata map[string]string `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether is primary replication
	IsPrimary            bool     `protobuf:"varint,17,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableReplicationOpts) Reset()         { *m = DisableReplicationOpts{} }
func (m *DisableReplicationOpts) String() string { return proto.CompactTextString(m) }
func (*DisableReplicationOpts) ProtoMessage()    {}
func (*DisableReplicationOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{14}
}

func (m *DisableReplicationOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableReplicationOpts.Unmarshal(m, b)
}
func (m *DisableReplicationOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableReplicationOpts.Marshal(b, m, deterministic)
}
func (m *DisableReplicationOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableReplicationOpts.Merge(m, src)
}
func (m *DisableReplicationOpts) XXX_Size() int {
	return xxx_messageInfo_DisableReplicationOpts.Size(m)
}
func (m *DisableReplicationOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableReplicationOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DisableReplicationOpts proto.InternalMessageInfo

func (m *DisableReplicationOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DisableReplicationOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DisableReplicationOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DisableReplicationOpts) GetPrimaryVolumeId() string {
	if m != nil {
		return m.PrimaryVolumeId
	}
	return ""
}

func (m *DisableReplicationOpts) GetSecondaryVolumeId() string {
	if m != nil {
		return m.SecondaryVolumeId
	}
	return ""
}

func (m *DisableReplicationOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *DisableReplicationOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *DisableReplicationOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *DisableReplicationOpts) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *DisableReplicationOpts) GetPrimaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.PrimaryReplicationDriverData
	}
	return nil
}

func (m *DisableReplicationOpts) GetSecondaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.SecondaryReplicationDriverData
	}
	return nil
}

func (m *DisableReplicationOpts) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *DisableReplicationOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DisableReplicationOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *DisableReplicationOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DisableReplicationOpts) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

// Delete ReplicationOpts is a structure which indicates all required properties
type FailoverReplicationOpts struct {
	// The uuid of the replication, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the replication, optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the replication, optional.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The uuid of the primary volume. This field is required.
	PrimaryVolumeId string `protobuf:"bytes,4,opt,name=primaryVolumeId,proto3" json:"primaryVolumeId,omitempty"`
	// The uuid of the secondary volume. This field is required.
	SecondaryVolumeId string `protobuf:"bytes,5,opt,name=secondaryVolumeId,proto3" json:"secondaryVolumeId,omitempty"`
	// The dock infomation on which the request will be executed
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The service level that volume belongs to, required.
	ProfileId string `protobuf:"bytes,7,opt,name=profileId,proto3" json:"profileId,omitempty"`
	// The uuid of the pool on which volume will be created, required.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The name of the pool on which volume will be created, required.
	PoolName string `protobuf:"bytes,9,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// The metadata of the primary replication, optional.
	PrimaryReplicationDriverData map[string]string `protobuf:"bytes,11,rep,name=primaryReplicationDriverData,proto3" json:"primaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The metadata of the seondary replication, optional.
	SecondaryReplicationDriverData map[string]string `protobuf:"bytes,12,rep,name=secondaryReplicationDriverData,proto3" json:"secondaryReplicationDriverData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The dock id.
	DockId string `protobuf:"bytes,13,opt,name=dockId,proto3" json:"dockId,omitempty"`
	// The replication driver type.
	DriverName string `protobuf:"bytes,14,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context string `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	// Allow attached volume
	AllowAttachedVolume bool `protobuf:"varint,16,opt,name=allowAttachedVolume,proto3" json:"allowAttachedVolume,omitempty"`
	// The secondary backend id.
	SecondaryBackendId string `protobuf:"bytes,17,opt,name=secondaryBackendId,proto3" json:"secondaryBackendId,omitempty"`
	// The replication metadata
	Metadata map[string]string `protobuf:"bytes,18,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether is primary replication
	IsPrimary            bool     `protobuf:"varint,19,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailoverReplicationOpts) Reset()         { *m = FailoverReplicationOpts{} }
func (m *FailoverReplicationOpts) String() string { return proto.CompactTextString(m) }
func (*FailoverReplicationOpts) ProtoMessage()    {}
func (*FailoverReplicationOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{15}
}

func (m *FailoverReplicationOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverReplicationOpts.Unmarshal(m, b)
}
func (m *FailoverReplicationOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverReplicationOpts.Marshal(b, m, deterministic)
}
func (m *FailoverReplicationOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverReplicationOpts.Merge(m, src)
}
func (m *FailoverReplicationOpts) XXX_Size() int {
	return xxx_messageInfo_FailoverReplicationOpts.Size(m)
}
func (m *FailoverReplicationOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverReplicationOpts.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverReplicationOpts proto.InternalMessageInfo

func (m *FailoverReplicationOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FailoverReplicationOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FailoverReplicationOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FailoverReplicationOpts) GetPrimaryVolumeId() string {
	if m != nil {
		return m.PrimaryVolumeId
	}
	return ""
}

func (m *FailoverReplicationOpts) GetSecondaryVolumeId() string {
	if m != nil {
		return m.SecondaryVolumeId
	}
	return ""
}

func (m *FailoverReplicationOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *FailoverReplicationOpts) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *FailoverReplicationOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *FailoverReplicationOpts) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *FailoverReplicationOpts) GetPrimaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.PrimaryReplicationDriverData
	}
	return nil
}

func (m *FailoverReplicationOpts) GetSecondaryReplicationDriverData() map[string]string {
	if m != nil {
		return m.SecondaryReplicationDriverData
	}
	return nil
}

func (m *FailoverReplicationOpts) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *FailoverReplicationOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *FailoverReplicationOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *FailoverReplicationOpts) GetAllowAttachedVolume() bool {
	if m != nil {
		return m.AllowAttachedVolume
	}
	return false
}

func (m *FailoverReplicationOpts) GetSecondaryBackendId() string {
	if m != nil {
		return m.SecondaryBackendId
	}
	return ""
}

func (m *FailoverReplicationOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FailoverReplicationOpts) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

type FailoverReplicationOpts_FailoverRequest struct {
	AllowAttachedVolume  bool     `protobuf:"varint,1,opt,name=allowAttachedVolume,proto3" json:"allowAttachedVolume,omitempty"`
	SecondaryBackendId   string   `protobuf:"bytes,2,opt,name=secondaryBackendId,proto3" json:"secondaryBackendId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailoverReplicationOpts_FailoverRequest) Reset() {
	*m = FailoverReplicationOpts_FailoverRequest{}
}
func (m *FailoverReplicationOpts_FailoverRequest) String() string { return proto.CompactTextString(m) }
func (*FailoverReplicationOpts_FailoverRequest) ProtoMessage()    {}
func (*FailoverReplicationOpts_FailoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{15, 3}
}

func (m *FailoverReplicationOpts_FailoverRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailoverReplicationOpts_FailoverRequest.Unmarshal(m, b)
}
func (m *FailoverReplicationOpts_FailoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailoverReplicationOpts_FailoverRequest.Marshal(b, m, deterministic)
}
func (m *FailoverReplicationOpts_FailoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverReplicationOpts_FailoverRequest.Merge(m, src)
}
func (m *FailoverReplicationOpts_FailoverRequest) XXX_Size() int {
	return xxx_messageInfo_FailoverReplicationOpts_FailoverRequest.Size(m)
}
func (m *FailoverReplicationOpts_FailoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverReplicationOpts_FailoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverReplicationOpts_FailoverRequest proto.InternalMessageInfo

func (m *FailoverReplicationOpts_FailoverRequest) GetAllowAttachedVolume() bool {
	if m != nil {
		return m.AllowAttachedVolume
	}
	return false
}

func (m *FailoverReplicationOpts_FailoverRequest) GetSecondaryBackendId() string {
	if m != nil {
		return m.SecondaryBackendId
	}
	return ""
}

// CreateVolumeGroupOpts is a structure which indicates all required
// properties for creating a volume group.
type CreateVolumeGroupOpts struct {
	// The uuid of the volume group, optional when creating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the volume, required.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The driver of the volume group.
	DriverName string `protobuf:"bytes,3,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The description of the volume, optional.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// When create volume from snapshot, this field is required.
	AvailabilityZone string `protobuf:"bytes,5,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	// The addVolumes contain UUIDs of volumes to be added to the group.
	AddVolumes []string `protobuf:"bytes,6,rep,name=addVolumes,proto3" json:"addVolumes,omitempty"`
	// The removeVolumes contains the volumes to be removed from the group.
	RemoveVolumes []string `protobuf:"bytes,7,rep,name=removeVolumes,proto3" json:"removeVolumes,omitempty"`
	// The pool belongs to the group.
	PoolId string `protobuf:"bytes,8,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The Context
	Context              string   `protobuf:"bytes,9,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVolumeGroupOpts) Reset()         { *m = CreateVolumeGroupOpts{} }
func (m *CreateVolumeGroupOpts) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeGroupOpts) ProtoMessage()    {}
func (*CreateVolumeGroupOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{16}
}

func (m *CreateVolumeGroupOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeGroupOpts.Unmarshal(m, b)
}
func (m *CreateVolumeGroupOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeGroupOpts.Marshal(b, m, deterministic)
}
func (m *CreateVolumeGroupOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeGroupOpts.Merge(m, src)
}
func (m *CreateVolumeGroupOpts) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeGroupOpts.Size(m)
}
func (m *CreateVolumeGroupOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeGroupOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeGroupOpts proto.InternalMessageInfo

func (m *CreateVolumeGroupOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateVolumeGroupOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVolumeGroupOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *CreateVolumeGroupOpts) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateVolumeGroupOpts) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *CreateVolumeGroupOpts) GetAddVolumes() []string {
	if m != nil {
		return m.AddVolumes
	}
	return nil
}

func (m *CreateVolumeGroupOpts) GetRemoveVolumes() []string {
	if m != nil {
		return m.RemoveVolumes
	}
	return nil
}

func (m *CreateVolumeGroupOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *CreateVolumeGroupOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type UpdateVolumeGroupOpts struct {
	// The uuid of the volume group, optional when updating.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The driver of the volume group.
	DriverName string `protobuf:"bytes,2,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The addVolumes contain UUIDs of volumes to be added to the group.
	AddVolumes []string `protobuf:"bytes,3,rep,name=addVolumes,proto3" json:"addVolumes,omitempty"`
	// The removeVolumes contains the volumes to be removed from the group.
	RemoveVolumes []string `protobuf:"bytes,4,rep,name=removeVolumes,proto3" json:"removeVolumes,omitempty"`
	// The pool belongs to the group.
	PoolId string `protobuf:"bytes,5,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The Context
	Context              string   `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVolumeGroupOpts) Reset()         { *m = UpdateVolumeGroupOpts{} }
func (m *UpdateVolumeGroupOpts) String() string { return proto.CompactTextString(m) }
func (*UpdateVolumeGroupOpts) ProtoMessage()    {}
func (*UpdateVolumeGroupOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{17}
}

func (m *UpdateVolumeGroupOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVolumeGroupOpts.Unmarshal(m, b)
}
func (m *UpdateVolumeGroupOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVolumeGroupOpts.Marshal(b, m, deterministic)
}
func (m *UpdateVolumeGroupOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVolumeGroupOpts.Merge(m, src)
}
func (m *UpdateVolumeGroupOpts) XXX_Size() int {
	return xxx_messageInfo_UpdateVolumeGroupOpts.Size(m)
}
func (m *UpdateVolumeGroupOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVolumeGroupOpts.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVolumeGroupOpts proto.InternalMessageInfo

func (m *UpdateVolumeGroupOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateVolumeGroupOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *UpdateVolumeGroupOpts) GetAddVolumes() []string {
	if m != nil {
		return m.AddVolumes
	}
	return nil
}

func (m *UpdateVolumeGroupOpts) GetRemoveVolumes() []string {
	if m != nil {
		return m.RemoveVolumes
	}
	return nil
}

func (m *UpdateVolumeGroupOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *UpdateVolumeGroupOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type DeleteVolumeGroupOpts struct {
	// The uuid of the volume group, optional when deleting.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The pool belongs to the group.
	PoolId string `protobuf:"bytes,2,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// The driver of the volume group.
	DriverName string `protobuf:"bytes,3,opt,name=driverName,proto3" json:"driverName,omitempty"`
	// The Context
	Context              string   `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeGroupOpts) Reset()         { *m = DeleteVolumeGroupOpts{} }
func (m *DeleteVolumeGroupOpts) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeGroupOpts) ProtoMessage()    {}
func (*DeleteVolumeGroupOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{18}
}

func (m *DeleteVolumeGroupOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeGroupOpts.Unmarshal(m, b)
}
func (m *DeleteVolumeGroupOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeGroupOpts.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeGroupOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeGroupOpts.Merge(m, src)
}
func (m *DeleteVolumeGroupOpts) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeGroupOpts.Size(m)
}
func (m *DeleteVolumeGroupOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeGroupOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeGroupOpts proto.InternalMessageInfo

func (m *DeleteVolumeGroupOpts) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteVolumeGroupOpts) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *DeleteVolumeGroupOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DeleteVolumeGroupOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// AttachVolumeOpts is a structure which indicates all required
// properties for attaching a volume.
type AttachVolumeOpts struct {
	// The access protocol for attaching a volume.
	AccessProtocol string `protobuf:"bytes,1,opt,name=accessProtocol,proto3" json:"accessProtocol,omitempty"`
	// The connectionData for attaching a volume.
	ConnectionData string `protobuf:"bytes,2,opt,name=connectionData,proto3" json:"connectionData,omitempty"`
	// The metadata for attaching a volume, optional.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The Context
	Context              string   `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachVolumeOpts) Reset()         { *m = AttachVolumeOpts{} }
func (m *AttachVolumeOpts) String() string { return proto.CompactTextString(m) }
func (*AttachVolumeOpts) ProtoMessage()    {}
func (*AttachVolumeOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{19}
}

func (m *AttachVolumeOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachVolumeOpts.Unmarshal(m, b)
}
func (m *AttachVolumeOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachVolumeOpts.Marshal(b, m, deterministic)
}
func (m *AttachVolumeOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachVolumeOpts.Merge(m, src)
}
func (m *AttachVolumeOpts) XXX_Size() int {
	return xxx_messageInfo_AttachVolumeOpts.Size(m)
}
func (m *AttachVolumeOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachVolumeOpts.DiscardUnknown(m)
}

var xxx_messageInfo_AttachVolumeOpts proto.InternalMessageInfo

func (m *AttachVolumeOpts) GetAccessProtocol() string {
	if m != nil {
		return m.AccessProtocol
	}
	return ""
}

func (m *AttachVolumeOpts) GetConnectionData() string {
	if m != nil {
		return m.ConnectionData
	}
	return ""
}

func (m *AttachVolumeOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AttachVolumeOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// DetachVolumeOpts is a structure which indicates all required
// properties for detaching a volume.
type DetachVolumeOpts struct {
	// The access protocol for detaching a volume.
	AccessProtocol string `protobuf:"bytes,1,opt,name=accessProtocol,proto3" json:"accessProtocol,omitempty"`
	// The connectionData for detaching a volume.
	ConnectionData string `protobuf:"bytes,2,opt,name=connectionData,proto3" json:"connectionData,omitempty"`
	// The metadata for detaching a volume, optional.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The Context
	Context              string   `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachVolumeOpts) Reset()         { *m = DetachVolumeOpts{} }
func (m *DetachVolumeOpts) String() string { return proto.CompactTextString(m) }
func (*DetachVolumeOpts) ProtoMessage()    {}
func (*DetachVolumeOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{20}
}

func (m *DetachVolumeOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachVolumeOpts.Unmarshal(m, b)
}
func (m *DetachVolumeOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachVolumeOpts.Marshal(b, m, deterministic)
}
func (m *DetachVolumeOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachVolumeOpts.Merge(m, src)
}
func (m *DetachVolumeOpts) XXX_Size() int {
	return xxx_messageInfo_DetachVolumeOpts.Size(m)
}
func (m *DetachVolumeOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachVolumeOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DetachVolumeOpts proto.InternalMessageInfo

func (m *DetachVolumeOpts) GetAccessProtocol() string {
	if m != nil {
		return m.AccessProtocol
	}
	return ""
}

func (m *DetachVolumeOpts) GetConnectionData() string {
	if m != nil {
		return m.ConnectionData
	}
	return ""
}

func (m *DetachVolumeOpts) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DetachVolumeOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// Generic response, it return:
// 1. Return result with message when create/update resource successfully.
// 2. Return result without message when delete resource successfully.
// 3. Return Error with error code and message when operate unsuccessfully.
type GenericResponse struct {
	// Types that are valid to be assigned to Reply:
	//	*GenericResponse_Result_
	//	*GenericResponse_Error_
	Reply                isGenericResponse_Reply `protobuf_oneof:"reply"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GenericResponse) Reset()         { *m = GenericResponse{} }
func (m *GenericResponse) String() string { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()    {}
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{21}
}

func (m *GenericResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericResponse.Unmarshal(m, b)
}
func (m *GenericResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericResponse.Marshal(b, m, deterministic)
}
func (m *GenericResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse.Merge(m, src)
}
func (m *GenericResponse) XXX_Size() int {
	return xxx_messageInfo_GenericResponse.Size(m)
}
func (m *GenericResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse proto.InternalMessageInfo

type isGenericResponse_Reply interface {
	isGenericResponse_Reply()
}

type GenericResponse_Result_ struct {
	Result *GenericResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type GenericResponse_Error_ struct {
	Error *GenericResponse_Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GenericResponse_Result_) isGenericResponse_Reply() {}

func (*GenericResponse_Error_) isGenericResponse_Reply() {}

func (m *GenericResponse) GetReply() isGenericResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *GenericResponse) GetResult() *GenericResponse_Result {
	if x, ok := m.GetReply().(*GenericResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (m *GenericResponse) GetError() *GenericResponse_Error {
	if x, ok := m.GetReply().(*GenericResponse_Error_); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GenericResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GenericResponse_Result_)(nil),
		(*GenericResponse_Error_)(nil),
	}
}

type GenericResponse_Result struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericResponse_Result) Reset()         { *m = GenericResponse_Result{} }
func (m *GenericResponse_Result) String() string { return proto.CompactTextString(m) }
func (*GenericResponse_Result) ProtoMessage()    {}
func (*GenericResponse_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{21, 0}
}

func (m *GenericResponse_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericResponse_Result.Unmarshal(m, b)
}
func (m *GenericResponse_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericResponse_Result.Marshal(b, m, deterministic)
}
func (m *GenericResponse_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse_Result.Merge(m, src)
}
func (m *GenericResponse_Result) XXX_Size() int {
	return xxx_messageInfo_GenericResponse_Result.Size(m)
}
func (m *GenericResponse_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse_Result.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse_Result proto.InternalMessageInfo

func (m *GenericResponse_Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GenericResponse_Error struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericResponse_Error) Reset()         { *m = GenericResponse_Error{} }
func (m *GenericResponse_Error) String() string { return proto.CompactTextString(m) }
func (*GenericResponse_Error) ProtoMessage()    {}
func (*GenericResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{21, 1}
}

func (m *GenericResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericResponse_Error.Unmarshal(m, b)
}
func (m *GenericResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericResponse_Error.Marshal(b, m, deterministic)
}
func (m *GenericResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse_Error.Merge(m, src)
}
func (m *GenericResponse_Error) XXX_Size() int {
	return xxx_messageInfo_GenericResponse_Error.Size(m)
}
func (m *GenericResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse_Error proto.InternalMessageInfo

func (m *GenericResponse_Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GenericResponse_Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CollectMetricsOpts struct {
	InstanceId           string   `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	MetricValues         []string `protobuf:"bytes,2,rep,name=metricValues,proto3" json:"metricValues,omitempty"`
	Context              string   `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	DriverName           string   `protobuf:"bytes,4,opt,name=driverName,proto3" json:"driverName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectMetricsOpts) Reset()         { *m = CollectMetricsOpts{} }
func (m *CollectMetricsOpts) String() string { return proto.CompactTextString(m) }
func (*CollectMetricsOpts) ProtoMessage()    {}
func (*CollectMetricsOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{22}
}

func (m *CollectMetricsOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectMetricsOpts.Unmarshal(m, b)
}
func (m *CollectMetricsOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectMetricsOpts.Marshal(b, m, deterministic)
}
func (m *CollectMetricsOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectMetricsOpts.Merge(m, src)
}
func (m *CollectMetricsOpts) XXX_Size() int {
	return xxx_messageInfo_CollectMetricsOpts.Size(m)
}
func (m *CollectMetricsOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectMetricsOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CollectMetricsOpts proto.InternalMessageInfo

func (m *CollectMetricsOpts) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *CollectMetricsOpts) GetMetricValues() []string {
	if m != nil {
		return m.MetricValues
	}
	return nil
}

func (m *CollectMetricsOpts) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CollectMetricsOpts) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateVolumeOpts)(nil), "proto.CreateVolumeOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateVolumeOpts.MetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateVolumeOpts.ReplicationDriverDataEntry")
	proto.RegisterType((*DeleteVolumeOpts)(nil), "proto.DeleteVolumeOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeleteVolumeOpts.MetadataEntry")
	proto.RegisterType((*ExtendVolumeOpts)(nil), "proto.ExtendVolumeOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.ExtendVolumeOpts.MetadataEntry")
	proto.RegisterType((*CreateVolumeSnapshotOpts)(nil), "proto.CreateVolumeSnapshotOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateVolumeSnapshotOpts.MetadataEntry")
	proto.RegisterType((*DeleteVolumeSnapshotOpts)(nil), "proto.DeleteVolumeSnapshotOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeleteVolumeSnapshotOpts.MetadataEntry")
	proto.RegisterType((*CreateVolumeAttachmentOpts)(nil), "proto.CreateVolumeAttachmentOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateVolumeAttachmentOpts.MetadataEntry")
	proto.RegisterType((*DeleteVolumeAttachmentOpts)(nil), "proto.DeleteVolumeAttachmentOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeleteVolumeAttachmentOpts.MetadataEntry")
	proto.RegisterType((*CreateSnapshotAttachmentOpts)(nil), "proto.CreateSnapshotAttachmentOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateSnapshotAttachmentOpts.MetadataEntry")
	proto.RegisterType((*DeleteSnapshotAttachmentOpts)(nil), "proto.DeleteSnapshotAttachmentOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeleteSnapshotAttachmentOpts.MetadataEntry")
	proto.RegisterType((*HostInfo)(nil), "proto.HostInfo")
	proto.RegisterType((*VolumeData)(nil), "proto.VolumeData")
	proto.RegisterMapType((map[string]string)(nil), "proto.VolumeData.DataEntry")
	proto.RegisterType((*CreateReplicationOpts)(nil), "proto.CreateReplicationOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateReplicationOpts.MetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateReplicationOpts.PrimaryReplicationDriverDataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.CreateReplicationOpts.SecondaryReplicationDriverDataEntry")
	proto.RegisterType((*DeleteReplicationOpts)(nil), "proto.DeleteReplicationOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeleteReplicationOpts.MetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeleteReplicationOpts.PrimaryReplicationDriverDataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeleteReplicationOpts.SecondaryReplicationDriverDataEntry")
	proto.RegisterType((*EnableReplicationOpts)(nil), "proto.EnableReplicationOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.EnableReplicationOpts.MetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.EnableReplicationOpts.PrimaryReplicationDriverDataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.EnableReplicationOpts.SecondaryReplicationDriverDataEntry")
	proto.RegisterType((*DisableReplicationOpts)(nil), "proto.DisableReplicationOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.DisableReplicationOpts.MetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DisableReplicationOpts.PrimaryReplicationDriverDataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DisableReplicationOpts.SecondaryReplicationDriverDataEntry")
	proto.RegisterType((*FailoverReplicationOpts)(nil), "proto.FailoverReplicationOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.FailoverReplicationOpts.MetadataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.FailoverReplicationOpts.PrimaryReplicationDriverDataEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.FailoverReplicationOpts.SecondaryReplicationDriverDataEntry")
	proto.RegisterType((*FailoverReplicationOpts_FailoverRequest)(nil), "proto.FailoverReplicationOpts.FailoverRequest")
	proto.RegisterType((*CreateVolumeGroupOpts)(nil), "proto.CreateVolumeGroupOpts")
	proto.RegisterType((*UpdateVolumeGroupOpts)(nil), "proto.UpdateVolumeGroupOpts")
	proto.RegisterType((*DeleteVolumeGroupOpts)(nil), "proto.DeleteVolumeGroupOpts")
	proto.RegisterType((*AttachVolumeOpts)(nil), "proto.AttachVolumeOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.AttachVolumeOpts.MetadataEntry")
	proto.RegisterType((*DetachVolumeOpts)(nil), "proto.DetachVolumeOpts")
	proto.RegisterMapType((map[string]string)(nil), "proto.DetachVolumeOpts.MetadataEntry")
	proto.RegisterType((*GenericResponse)(nil), "proto.GenericResponse")
	proto.RegisterType((*GenericResponse_Result)(nil), "proto.GenericResponse.Result")
	proto.RegisterType((*GenericResponse_Error)(nil), "proto.GenericResponse.Error")
	proto.RegisterType((*CollectMetricsOpts)(nil), "proto.CollectMetricsOpts")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 1889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x49, 0x73, 0xdb, 0x46,
	0x16, 0x36, 0xc1, 0xfd, 0x51, 0x0b, 0xd5, 0x5a, 0x8c, 0xe1, 0xc8, 0x1a, 0x99, 0xe3, 0x71, 0xa9,
	0x6c, 0x8f, 0x3c, 0xe6, 0x4c, 0x95, 0x67, 0xa9, 0x59, 0xb4, 0xd9, 0x62, 0xd9, 0x1a, 0xcb, 0xf4,
	0xd8, 0x87, 0xb9, 0xc1, 0x40, 0x7b, 0x84, 0x12, 0x88, 0xe6, 0x00, 0x10, 0x6d, 0xe5, 0x94, 0x4a,
	0x72, 0x70, 0x72, 0xf4, 0x3f, 0x48, 0xa5, 0x72, 0xcc, 0x2f, 0xc8, 0x21, 0x97, 0xfc, 0x8c, 0x54,
	0x2a, 0x3e, 0xa6, 0x2a, 0x07, 0xff, 0x80, 0x1c, 0x52, 0x68, 0x2c, 0xec, 0x06, 0x1a, 0x20, 0x18,
	0xca, 0xb2, 0x1c, 0xf3, 0x44, 0xe2, 0x75, 0xe3, 0xf5, 0x7b, 0xdf, 0x7b, 0xef, 0xeb, 0x05, 0x0d,
	0xb5, 0x2e, 0xd1, 0xb0, 0xb1, 0xde, 0xb3, 0x88, 0x43, 0x50, 0x91, 0xfe, 0x34, 0x5f, 0x15, 0xa1,
	0xbe, 0x65, 0x61, 0xc5, 0xc1, 0x8f, 0x88, 0x71, 0xd4, 0xc5, 0xf7, 0x7a, 0x8e, 0x8d, 0x66, 0x40,
	0xd2, 0x35, 0x39, 0xb7, 0x9a, 0x5b, 0xab, 0x76, 0x24, 0x5d, 0x43, 0x08, 0x0a, 0xa6, 0xd2, 0xc5,
	0xb2, 0x44, 0x25, 0xf4, 0xbf, 0x2b, 0xb3, 0xf5, 0xf7, 0xb0, 0x9c, 0x5f, 0xcd, 0xad, 0xe5, 0x3b,
	0xf4, 0x3f, 0x5a, 0x85, 0x9a, 0x86, 0x6d, 0xd5, 0xd2, 0x7b, 0x8e, 0x4e, 0x4c, 0xb9, 0x40, 0xbb,
	0xb3, 0x22, 0xb4, 0x02, 0x60, 0x9b, 0x4a, 0xcf, 0x3e, 0x20, 0x4e, 0x5b, 0x93, 0x8b, 0xb4, 0x03,
	0x23, 0x41, 0x57, 0xa0, 0xae, 0xf4, 0x15, 0xdd, 0x50, 0x1e, 0xeb, 0x86, 0xee, 0x1c, 0xff, 0x97,
	0x98, 0x58, 0x2e, 0xd1, 0x5e, 0x31, 0x39, 0x5a, 0x86, 0x6a, 0xcf, 0x22, 0x4f, 0x74, 0x03, 0xb7,
	0x35, 0xb9, 0x4c, 0x3b, 0x0d, 0x04, 0x68, 0x09, 0x4a, 0x3d, 0x42, 0x8c, 0xb6, 0x26, 0x57, 0x68,
	0x93, 0xff, 0x84, 0x1a, 0x50, 0x71, 0xff, 0xfd, 0xdb, 0xf5, 0xa7, 0x4a, 0x5b, 0xc2, 0x67, 0xb4,
	0x01, 0x95, 0x2e, 0x76, 0x14, 0x4d, 0x71, 0x14, 0x19, 0x56, 0xf3, 0x6b, 0xb5, 0xd6, 0xef, 0x3c,
	0xb4, 0xd6, 0xa3, 0x10, 0xad, 0xef, 0xf9, 0xfd, 0x76, 0x4c, 0xc7, 0x3a, 0xee, 0x84, 0xaf, 0xb9,
	0x0e, 0x6a, 0x96, 0xde, 0xc7, 0x16, 0x1d, 0xa0, 0xe6, 0x39, 0x38, 0x90, 0x20, 0x19, 0xca, 0x2a,
	0x31, 0x1d, 0xfc, 0xcc, 0x91, 0xa7, 0x68, 0x63, 0xf0, 0x88, 0x0e, 0x60, 0xd1, 0xc2, 0x3d, 0x43,
	0x57, 0x15, 0x17, 0xa9, 0x6d, 0xfa, 0xca, 0xb6, 0x6b, 0xc9, 0x34, 0xb5, 0xa4, 0x95, 0x64, 0x49,
	0x47, 0xf4, 0x92, 0x67, 0x96, 0x58, 0x21, 0xba, 0x04, 0xd3, 0x4c, 0x43, 0x5b, 0x93, 0x67, 0xa8,
	0x25, 0xbc, 0x10, 0x35, 0x61, 0x2a, 0x08, 0xcc, 0x03, 0x37, 0xd0, 0xb3, 0x34, 0xd0, 0x9c, 0x0c,
	0x5d, 0x83, 0xb9, 0xe0, 0xf9, 0x96, 0x45, 0xba, 0x5b, 0x06, 0x39, 0xd2, 0xe4, 0xfa, 0x6a, 0x6e,
	0xad, 0xd2, 0x89, 0x37, 0x34, 0xfe, 0x06, 0xd3, 0x1c, 0x6c, 0xa8, 0x0e, 0xf9, 0x43, 0x7c, 0xec,
	0x27, 0x9a, 0xfb, 0x17, 0x2d, 0x40, 0xb1, 0xaf, 0x18, 0x47, 0x41, 0xaa, 0x79, 0x0f, 0x7f, 0x95,
	0xfe, 0x9c, 0x6b, 0xec, 0x42, 0x23, 0xd9, 0xd3, 0x51, 0x34, 0x35, 0x5f, 0x48, 0x50, 0xdf, 0xc6,
	0x06, 0x4e, 0x4d, 0x79, 0x2e, 0xb9, 0xa4, 0xe4, 0xe4, 0xca, 0x73, 0xc9, 0xc5, 0x26, 0x50, 0x81,
	0x4b, 0xa0, 0xe8, 0x80, 0x19, 0x13, 0xa8, 0x98, 0x96, 0x40, 0x25, 0x2e, 0x81, 0xc6, 0x82, 0xb7,
	0xf9, 0x75, 0x1e, 0xea, 0x3b, 0xcf, 0x1c, 0x6c, 0x6a, 0x13, 0x1e, 0x48, 0xe1, 0x81, 0x28, 0x44,
	0x27, 0xcf, 0x03, 0xe3, 0x85, 0xf1, 0x95, 0x04, 0x32, 0xcb, 0x10, 0x0f, 0x7c, 0x48, 0x5f, 0x73,
	0x38, 0x1b, 0x50, 0xe9, 0xd3, 0xf1, 0xc2, 0x60, 0x86, 0xcf, 0x7c, 0x78, 0x4a, 0xd1, 0xf0, 0xb4,
	0x19, 0xa8, 0xcb, 0x14, 0xea, 0xdf, 0x0b, 0x88, 0x8e, 0x75, 0x23, 0x23, 0xe4, 0x95, 0x34, 0xc8,
	0xab, 0x27, 0x08, 0xf9, 0x73, 0x09, 0x64, 0xb6, 0xba, 0x53, 0x21, 0x67, 0x81, 0x92, 0x22, 0x40,
	0xb1, 0x50, 0xe4, 0x39, 0x28, 0x92, 0xd4, 0x67, 0x84, 0xa2, 0x90, 0x06, 0x45, 0xf1, 0x04, 0xa1,
	0xf8, 0x3c, 0x0f, 0x0d, 0x36, 0x6c, 0x1b, 0x8e, 0xa3, 0xa8, 0x07, 0x5d, 0x6c, 0x8e, 0x0e, 0xc6,
	0x25, 0x98, 0xd6, 0xc8, 0x5d, 0xa2, 0x2a, 0x86, 0xa7, 0x84, 0x26, 0x64, 0xa5, 0xc3, 0x0b, 0xdd,
	0xdc, 0xea, 0x1e, 0x19, 0x8e, 0xbe, 0xaf, 0x38, 0x07, 0xd4, 0xcd, 0x4a, 0x67, 0x20, 0x40, 0x57,
	0xa1, 0x72, 0x40, 0x6c, 0xa7, 0x6d, 0x3e, 0x21, 0xd4, 0xcd, 0x5a, 0x6b, 0xd6, 0x07, 0x74, 0xd7,
	0x17, 0x77, 0xc2, 0x0e, 0xe8, 0x0e, 0x83, 0x7e, 0x89, 0xa2, 0x7f, 0x5d, 0x90, 0x88, 0xbc, 0x47,
	0x19, 0xf1, 0x2f, 0xa7, 0xe1, 0x5f, 0xe1, 0x57, 0x01, 0x97, 0x61, 0x66, 0x43, 0x55, 0xb1, 0x6d,
	0xef, 0xbb, 0x63, 0xab, 0xc4, 0xf0, 0x73, 0x35, 0x22, 0x1d, 0x2f, 0x4e, 0x2f, 0x25, 0x68, 0xb0,
	0x39, 0x35, 0x46, 0x9c, 0x58, 0x8c, 0xf3, 0xa3, 0x60, 0x5c, 0xe0, 0x30, 0x4e, 0xb6, 0xe6, 0xe4,
	0x27, 0x4a, 0x01, 0xc6, 0xe5, 0x93, 0xc7, 0xf8, 0x8b, 0x3c, 0x2c, 0x7b, 0x99, 0x13, 0x54, 0xec,
	0x10, 0x94, 0xf9, 0x29, 0x51, 0x8a, 0x4d, 0x89, 0xa7, 0x5e, 0x11, 0x7b, 0xb1, 0x8a, 0xb8, 0xc1,
	0x55, 0x84, 0xd8, 0xaf, 0xb7, 0xb5, 0x26, 0xbe, 0x97, 0x60, 0xd9, 0xcb, 0xc2, 0x13, 0x8a, 0xd7,
	0x48, 0x95, 0xb1, 0x17, 0xab, 0x8c, 0x1b, 0x5c, 0x65, 0x8c, 0x85, 0xf5, 0x99, 0xab, 0x8d, 0xf7,
	0x73, 0x50, 0x09, 0x40, 0xa0, 0x0b, 0x31, 0x43, 0x71, 0x9e, 0x10, 0xab, 0xeb, 0xbf, 0x1d, 0x3e,
	0xbb, 0x8b, 0x37, 0x62, 0xff, 0xe7, 0xb8, 0x17, 0xe8, 0xf0, 0x9f, 0xdc, 0x55, 0x8a, 0x0b, 0x9d,
	0xbf, 0xfa, 0xa6, 0xff, 0x69, 0x7c, 0x7a, 0xfe, 0x5c, 0x27, 0xe9, 0x3d, 0xb7, 0x12, 0x74, 0x53,
	0x77, 0x74, 0xc5, 0x21, 0x96, 0x0f, 0xc1, 0x40, 0xd0, 0xec, 0x03, 0x78, 0x6c, 0x43, 0x77, 0x44,
	0xd7, 0xa1, 0x40, 0xa1, 0xcf, 0x51, 0xe8, 0x7f, 0xed, 0x43, 0x3f, 0xe8, 0xb0, 0x3e, 0xd8, 0x53,
	0xd1, 0x8e, 0x8d, 0x9b, 0x50, 0xfd, 0x79, 0x9b, 0x8f, 0xcf, 0xaa, 0xb0, 0xe8, 0x95, 0x0f, 0xb3,
	0x9b, 0xc9, 0xbc, 0x3a, 0x8b, 0xac, 0xc4, 0xf2, 0xf1, 0x95, 0xd8, 0x1a, 0xcc, 0xf6, 0x2c, 0xbd,
	0xab, 0x58, 0xc7, 0x8f, 0x02, 0xca, 0xf6, 0x20, 0x89, 0x8a, 0xe9, 0xde, 0x0d, 0xab, 0xc4, 0xd4,
	0xd8, 0xbe, 0x1e, 0x4e, 0xf1, 0x86, 0x37, 0xbc, 0x20, 0xff, 0x20, 0x07, 0xcb, 0xbe, 0xfd, 0xc2,
	0x4d, 0xa0, 0x5c, 0xa3, 0x81, 0xfb, 0x07, 0xc7, 0x4f, 0x11, 0x80, 0xd7, 0xf7, 0x53, 0x14, 0x78,
	0xb1, 0x4d, 0x1d, 0x03, 0x3d, 0xcf, 0xc1, 0x4a, 0x08, 0x8c, 0xd8, 0x8c, 0x29, 0x6a, 0xc6, 0xbf,
	0x52, 0xcd, 0x78, 0x90, 0xaa, 0xc2, 0x33, 0x64, 0xc8, 0x38, 0x2e, 0x86, 0x1a, 0x51, 0x0f, 0xdb,
	0x9a, 0x3c, 0xed, 0x61, 0xe8, 0x3d, 0x45, 0xea, 0x7e, 0x26, 0xad, 0xee, 0x67, 0xf9, 0xba, 0x77,
	0xab, 0xc5, 0xf6, 0x11, 0xf2, 0x77, 0xf0, 0x03, 0x01, 0xba, 0xc5, 0xd0, 0xd3, 0x1c, 0xf5, 0xf1,
	0x4a, 0xaa, 0x8f, 0x49, 0xbc, 0xf4, 0x17, 0x98, 0xe9, 0x87, 0x45, 0x75, 0x57, 0xb7, 0x1d, 0x19,
	0x51, 0x6d, 0x73, 0xb1, 0x8a, 0xeb, 0x44, 0x3a, 0xba, 0x89, 0xcd, 0x9c, 0x4f, 0xec, 0x11, 0x0d,
	0xcb, 0xf3, 0x5e, 0x62, 0x47, 0xc4, 0x6e, 0x62, 0x33, 0xf6, 0xec, 0x63, 0x4b, 0x27, 0x9a, 0xbc,
	0x40, 0xf7, 0x33, 0xf1, 0x06, 0xd4, 0x82, 0x05, 0x46, 0xb8, 0xa9, 0x98, 0xda, 0x53, 0x5d, 0x73,
	0x0e, 0xe4, 0x45, 0xfa, 0x82, 0xb0, 0xad, 0x71, 0x0f, 0x2e, 0x0e, 0x4d, 0xa6, 0x91, 0x0e, 0x37,
	0xee, 0xc3, 0x6f, 0x33, 0xa4, 0xc5, 0x48, 0x2a, 0xc7, 0x22, 0xe8, 0x6f, 0xca, 0xb0, 0xe8, 0x4d,
	0x3c, 0x13, 0x96, 0x7a, 0x6d, 0x2c, 0x25, 0x04, 0xf8, 0xf4, 0x59, 0x4a, 0x6c, 0xc6, 0xd9, 0x64,
	0x29, 0x96, 0x87, 0xea, 0x1c, 0x0f, 0x89, 0xbd, 0x48, 0xe2, 0x21, 0x8e, 0xed, 0xe6, 0x22, 0x6c,
	0xf7, 0x6e, 0x94, 0xf7, 0x8e, 0xa9, 0x3c, 0x36, 0x26, 0xe5, 0xfd, 0xfa, 0xca, 0x5b, 0x08, 0xf0,
	0xe9, 0x97, 0xb7, 0xd8, 0x8c, 0xb7, 0xad, 0xbc, 0xc5, 0x5e, 0x4c, 0xca, 0x5b, 0x58, 0xde, 0xdf,
	0x95, 0x61, 0x69, 0x5b, 0xb7, 0x27, 0xf5, 0x3d, 0x5a, 0x7d, 0x7f, 0x98, 0xad, 0xbe, 0xff, 0x19,
	0xcc, 0x38, 0x42, 0x84, 0xc7, 0x2e, 0xf0, 0x8f, 0xb3, 0x16, 0xf8, 0x46, 0xba, 0x1d, 0x67, 0xb3,
	0xc2, 0x6f, 0xc7, 0x2a, 0xfc, 0x6a, 0xba, 0x1b, 0x93, 0x12, 0x17, 0x96, 0xf8, 0x97, 0x55, 0x38,
	0x7f, 0x4b, 0xd1, 0x0d, 0xd2, 0xc7, 0xd6, 0xa4, 0xc6, 0xb3, 0xd7, 0xf8, 0x47, 0xd9, 0x6a, 0x3c,
	0x98, 0x3c, 0x13, 0x20, 0x1e, 0xbb, 0xc8, 0x3f, 0xc9, 0x5a, 0xe4, 0x9b, 0x43, 0x0c, 0x39, 0x9b,
	0x55, 0xfe, 0x07, 0x98, 0x57, 0x0c, 0x83, 0x3c, 0xf5, 0x4e, 0x2b, 0xb1, 0xff, 0xbd, 0xd4, 0x3f,
	0x56, 0x10, 0x35, 0xa1, 0x75, 0x40, 0xa1, 0x95, 0x9b, 0x8a, 0x7a, 0x88, 0x4d, 0xad, 0xad, 0xd1,
	0xba, 0xae, 0x76, 0x04, 0x2d, 0x68, 0x97, 0xe1, 0x11, 0xef, 0x08, 0xe1, 0xda, 0x10, 0xa4, 0x32,
	0x11, 0xc9, 0xfc, 0xbb, 0x46, 0x24, 0x0d, 0x1b, 0x66, 0x07, 0x88, 0xfd, 0xff, 0x08, 0xdb, 0x89,
	0xd1, 0xcb, 0x8d, 0x1a, 0x3d, 0x29, 0x29, 0x7a, 0xcd, 0x4f, 0xa5, 0xe0, 0x10, 0xd4, 0x53, 0x70,
	0xdb, 0x22, 0x47, 0xbd, 0xcc, 0xdc, 0xc5, 0xe7, 0x65, 0x3e, 0x96, 0x97, 0xc3, 0x3f, 0x57, 0x8b,
	0x38, 0xa8, 0x98, 0xc0, 0x41, 0x2b, 0x00, 0x8a, 0xe6, 0x3b, 0x6a, 0xd3, 0xef, 0x20, 0xd5, 0x0e,
	0x23, 0xf1, 0x2e, 0xd3, 0x74, 0x49, 0x1f, 0x07, 0x5d, 0xca, 0xb4, 0x0b, 0x2f, 0x4c, 0xe4, 0xaa,
	0xc4, 0x6f, 0xd2, 0xcd, 0xaf, 0x72, 0xb0, 0xf8, 0xb0, 0xa7, 0x65, 0xc0, 0x88, 0xc7, 0x43, 0x8a,
	0xe1, 0xc1, 0x7b, 0x90, 0x1f, 0xee, 0x41, 0x21, 0xdd, 0x83, 0x62, 0x92, 0x07, 0xfc, 0xa7, 0x84,
	0xe6, 0x71, 0x70, 0x86, 0x34, 0xcc, 0x81, 0x81, 0x6a, 0x89, 0x53, 0x3d, 0x2c, 0xd0, 0xcc, 0xd0,
	0x05, 0x7e, 0xe8, 0x1f, 0x73, 0x50, 0xf7, 0x72, 0x94, 0xb9, 0xcd, 0x72, 0x19, 0x66, 0x14, 0xfe,
	0xd3, 0x86, 0x67, 0x42, 0x44, 0xea, 0xf6, 0x53, 0x89, 0x69, 0x62, 0x95, 0x16, 0xa6, 0xcb, 0x30,
	0x9e, 0x59, 0x11, 0x29, 0x77, 0x4b, 0x24, 0xcf, 0xdd, 0x12, 0x89, 0x0e, 0x9d, 0x48, 0x3e, 0x89,
	0x1e, 0x8c, 0xb7, 0x3a, 0x70, 0xdd, 0xdf, 0xc6, 0x6f, 0xcc, 0xfd, 0xe8, 0xd0, 0xa7, 0xed, 0xfe,
	0x0f, 0x39, 0x98, 0xbd, 0x8d, 0x4d, 0x6c, 0xe9, 0x6a, 0x07, 0xdb, 0x3d, 0x62, 0xda, 0x18, 0xdd,
	0x84, 0x92, 0x85, 0xed, 0x23, 0xc3, 0xa1, 0x2a, 0x6a, 0xad, 0x0b, 0xbe, 0xad, 0x91, 0x7e, 0xeb,
	0x1d, 0xda, 0x69, 0xf7, 0x5c, 0xc7, 0xef, 0x8e, 0xfe, 0x04, 0x45, 0x6c, 0x59, 0xc4, 0xa2, 0xc3,
	0xd4, 0x5a, 0xcb, 0x09, 0xef, 0xed, 0xb8, 0x7d, 0x76, 0xcf, 0x75, 0xbc, 0xce, 0x8d, 0x26, 0x94,
	0x3c, 0x4d, 0xae, 0x8f, 0x5d, 0x6c, 0xdb, 0xca, 0xff, 0xb0, 0x6f, 0x7c, 0xf0, 0xd8, 0xf8, 0x3b,
	0x14, 0xe9, 0x5b, 0x2e, 0xc9, 0xa9, 0x44, 0x0b, 0xda, 0xe9, 0xff, 0x28, 0x89, 0x49, 0x31, 0x12,
	0xdb, 0x2c, 0x43, 0xd1, 0xc2, 0x3d, 0xe3, 0xb8, 0xf9, 0x22, 0x07, 0x68, 0x8b, 0x18, 0x06, 0x56,
	0x9d, 0x3d, 0xec, 0x58, 0xba, 0x6a, 0xd3, 0x78, 0xaf, 0x00, 0xe8, 0xa6, 0xed, 0x28, 0xa6, 0xea,
	0xae, 0x9e, 0x3c, 0xdd, 0x8c, 0x04, 0x35, 0x61, 0xaa, 0x4b, 0xbb, 0x3f, 0x72, 0x81, 0xb3, 0x65,
	0x89, 0x56, 0x3d, 0x27, 0x63, 0x03, 0x94, 0xe7, 0xa7, 0xf8, 0x21, 0x37, 0x4c, 0x5a, 0xdf, 0x56,
	0x01, 0xb6, 0x88, 0xe9, 0x58, 0xae, 0x61, 0x16, 0xda, 0x80, 0x29, 0x96, 0xf0, 0xd1, 0xf9, 0x84,
	0xdb, 0x8c, 0x8d, 0x25, 0x31, 0xbe, 0xcd, 0x73, 0xae, 0x0a, 0x96, 0x4e, 0x42, 0x15, 0xd1, 0x9b,
	0x75, 0xe9, 0x2a, 0xd8, 0x0b, 0x5c, 0xa1, 0x8a, 0xe8, 0xad, 0xae, 0x14, 0x15, 0xf7, 0x61, 0x41,
	0x74, 0x31, 0x09, 0xfd, 0x66, 0xc8, 0xad, 0xa5, 0x74, 0x95, 0xa2, 0x0b, 0x3e, 0xa1, 0xca, 0xa4,
	0xdb, 0x3f, 0x29, 0x2a, 0x1f, 0xc2, 0x92, 0xf8, 0xd6, 0x0a, 0xba, 0x38, 0xf4, 0x52, 0x4b, 0xba,
	0x5a, 0xf1, 0x45, 0x8d, 0x50, 0x6d, 0xf2, 0x3d, 0x8e, 0x14, 0xb5, 0x77, 0x60, 0x2e, 0xf6, 0x19,
	0x09, 0x2d, 0xa7, 0x7d, 0x60, 0x4a, 0x57, 0x16, 0x3b, 0x0b, 0x0e, 0x95, 0x09, 0x4f, 0x89, 0xd3,
	0x95, 0xc5, 0x4e, 0x9e, 0x42, 0x65, 0xc2, 0x33, 0xa9, 0x14, 0x65, 0x7b, 0x80, 0xe2, 0x9b, 0x5c,
	0x74, 0x21, 0x75, 0xff, 0x9b, 0xa2, 0xee, 0x1e, 0xcc, 0x0b, 0xd6, 0xba, 0x68, 0x25, 0x7d, 0x1d,
	0x9c, 0x25, 0x0c, 0xcc, 0x7c, 0x1d, 0x09, 0x43, 0x64, 0x26, 0x4f, 0x57, 0x16, 0x5b, 0xbd, 0x84,
	0xca, 0x84, 0xeb, 0x9a, 0x2c, 0x31, 0x15, 0x29, 0x13, 0xae, 0x31, 0x52, 0x94, 0xed, 0xc0, 0x0c,
	0xcf, 0x96, 0xe8, 0x57, 0x81, 0x8f, 0x31, 0x12, 0x4d, 0x56, 0xd3, 0x7a, 0x59, 0x85, 0xe9, 0x7d,
	0x8b, 0xf4, 0x75, 0xdb, 0x9d, 0x10, 0x89, 0x7a, 0x38, 0xe1, 0xb8, 0x09, 0xc7, 0x4d, 0x38, 0x6e,
	0xc2, 0x71, 0xbf, 0x20, 0x8e, 0x7b, 0x91, 0x03, 0xf0, 0x32, 0x3c, 0x20, 0x38, 0x76, 0x67, 0x13,
	0x52, 0x4b, 0x74, 0xbb, 0x33, 0x8c, 0xe0, 0x04, 0x2a, 0xa2, 0x5b, 0x86, 0x64, 0x15, 0x8f, 0x4b,
	0xb4, 0xe1, 0x8f, 0x3f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x14, 0x82, 0x99, 0x3b, 0xce, 0x34, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	// Create a volume
	CreateVolume(ctx context.Context, in *CreateVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a volume
	DeleteVolume(ctx context.Context, in *DeleteVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Extend a volume
	ExtendVolume(ctx context.Context, in *ExtendVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(ctx context.Context, in *CreateVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(ctx context.Context, in *DeleteVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a volume attachment
	CreateVolumeAttachment(ctx context.Context, in *CreateVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(ctx context.Context, in *DeleteVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a replication
	CreateReplication(ctx context.Context, in *CreateReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a replication
	DeleteReplication(ctx context.Context, in *DeleteReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Enable a replication
	EnableReplication(ctx context.Context, in *EnableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Disable a replication
	DisableReplication(ctx context.Context, in *DisableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Failover a replication
	FailoverReplication(ctx context.Context, in *FailoverReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a volume group
	CreateVolumeGroup(ctx context.Context, in *CreateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Update volume group
	UpdateVolumeGroup(ctx context.Context, in *UpdateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete volume group
	DeleteVolumeGroup(ctx context.Context, in *DeleteVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	CollectMetrics(ctx context.Context, in *CollectMetricsOpts, opts ...grpc.CallOption) (*GenericResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) CreateVolume(ctx context.Context, in *CreateVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteVolume(ctx context.Context, in *DeleteVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ExtendVolume(ctx context.Context, in *ExtendVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/ExtendVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) CreateVolumeSnapshot(ctx context.Context, in *CreateVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/CreateVolumeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteVolumeSnapshot(ctx context.Context, in *DeleteVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/DeleteVolumeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) CreateVolumeAttachment(ctx context.Context, in *CreateVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/CreateVolumeAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteVolumeAttachment(ctx context.Context, in *DeleteVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/DeleteVolumeAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) CreateReplication(ctx context.Context, in *CreateReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/CreateReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteReplication(ctx context.Context, in *DeleteReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/DeleteReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) EnableReplication(ctx context.Context, in *EnableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/EnableReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DisableReplication(ctx context.Context, in *DisableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/DisableReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) FailoverReplication(ctx context.Context, in *FailoverReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/FailoverReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) CreateVolumeGroup(ctx context.Context, in *CreateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/CreateVolumeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UpdateVolumeGroup(ctx context.Context, in *UpdateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/UpdateVolumeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteVolumeGroup(ctx context.Context, in *DeleteVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/DeleteVolumeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) CollectMetrics(ctx context.Context, in *CollectMetricsOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.Controller/CollectMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	// Create a volume
	CreateVolume(context.Context, *CreateVolumeOpts) (*GenericResponse, error)
	// Delete a volume
	DeleteVolume(context.Context, *DeleteVolumeOpts) (*GenericResponse, error)
	// Extend a volume
	ExtendVolume(context.Context, *ExtendVolumeOpts) (*GenericResponse, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(context.Context, *CreateVolumeSnapshotOpts) (*GenericResponse, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(context.Context, *DeleteVolumeSnapshotOpts) (*GenericResponse, error)
	// Create a volume attachment
	CreateVolumeAttachment(context.Context, *CreateVolumeAttachmentOpts) (*GenericResponse, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(context.Context, *DeleteVolumeAttachmentOpts) (*GenericResponse, error)
	// Create a replication
	CreateReplication(context.Context, *CreateReplicationOpts) (*GenericResponse, error)
	// Delete a replication
	DeleteReplication(context.Context, *DeleteReplicationOpts) (*GenericResponse, error)
	// Enable a replication
	EnableReplication(context.Context, *EnableReplicationOpts) (*GenericResponse, error)
	// Disable a replication
	DisableReplication(context.Context, *DisableReplicationOpts) (*GenericResponse, error)
	// Failover a replication
	FailoverReplication(context.Context, *FailoverReplicationOpts) (*GenericResponse, error)
	// Create a volume group
	CreateVolumeGroup(context.Context, *CreateVolumeGroupOpts) (*GenericResponse, error)
	// Update volume group
	UpdateVolumeGroup(context.Context, *UpdateVolumeGroupOpts) (*GenericResponse, error)
	// Delete volume group
	DeleteVolumeGroup(context.Context, *DeleteVolumeGroupOpts) (*GenericResponse, error)
	CollectMetrics(context.Context, *CollectMetricsOpts) (*GenericResponse, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) CreateVolume(ctx context.Context, req *CreateVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (*UnimplementedControllerServer) DeleteVolume(ctx context.Context, req *DeleteVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (*UnimplementedControllerServer) ExtendVolume(ctx context.Context, req *ExtendVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendVolume not implemented")
}
func (*UnimplementedControllerServer) CreateVolumeSnapshot(ctx context.Context, req *CreateVolumeSnapshotOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeSnapshot not implemented")
}
func (*UnimplementedControllerServer) DeleteVolumeSnapshot(ctx context.Context, req *DeleteVolumeSnapshotOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeSnapshot not implemented")
}
func (*UnimplementedControllerServer) CreateVolumeAttachment(ctx context.Context, req *CreateVolumeAttachmentOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeAttachment not implemented")
}
func (*UnimplementedControllerServer) DeleteVolumeAttachment(ctx context.Context, req *DeleteVolumeAttachmentOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeAttachment not implemented")
}
func (*UnimplementedControllerServer) CreateReplication(ctx context.Context, req *CreateReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplication not implemented")
}
func (*UnimplementedControllerServer) DeleteReplication(ctx context.Context, req *DeleteReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplication not implemented")
}
func (*UnimplementedControllerServer) EnableReplication(ctx context.Context, req *EnableReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableReplication not implemented")
}
func (*UnimplementedControllerServer) DisableReplication(ctx context.Context, req *DisableReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableReplication not implemented")
}
func (*UnimplementedControllerServer) FailoverReplication(ctx context.Context, req *FailoverReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailoverReplication not implemented")
}
func (*UnimplementedControllerServer) CreateVolumeGroup(ctx context.Context, req *CreateVolumeGroupOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeGroup not implemented")
}
func (*UnimplementedControllerServer) UpdateVolumeGroup(ctx context.Context, req *UpdateVolumeGroupOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolumeGroup not implemented")
}
func (*UnimplementedControllerServer) DeleteVolumeGroup(ctx context.Context, req *DeleteVolumeGroupOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeGroup not implemented")
}
func (*UnimplementedControllerServer) CollectMetrics(ctx context.Context, req *CollectMetricsOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectMetrics not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CreateVolume(ctx, req.(*CreateVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteVolume(ctx, req.(*DeleteVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ExtendVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ExtendVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/ExtendVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ExtendVolume(ctx, req.(*ExtendVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_CreateVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeSnapshotOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CreateVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/CreateVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CreateVolumeSnapshot(ctx, req.(*CreateVolumeSnapshotOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeSnapshotOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/DeleteVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteVolumeSnapshot(ctx, req.(*DeleteVolumeSnapshotOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_CreateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeAttachmentOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CreateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/CreateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CreateVolumeAttachment(ctx, req.(*CreateVolumeAttachmentOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeAttachmentOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/DeleteVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteVolumeAttachment(ctx, req.(*DeleteVolumeAttachmentOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_CreateReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CreateReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/CreateReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CreateReplication(ctx, req.(*CreateReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/DeleteReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteReplication(ctx, req.(*DeleteReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_EnableReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).EnableReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/EnableReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).EnableReplication(ctx, req.(*EnableReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DisableReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DisableReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/DisableReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DisableReplication(ctx, req.(*DisableReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_FailoverReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailoverReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).FailoverReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/FailoverReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).FailoverReplication(ctx, req.(*FailoverReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_CreateVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeGroupOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CreateVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/CreateVolumeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CreateVolumeGroup(ctx, req.(*CreateVolumeGroupOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UpdateVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolumeGroupOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UpdateVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/UpdateVolumeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UpdateVolumeGroup(ctx, req.(*UpdateVolumeGroupOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeGroupOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/DeleteVolumeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteVolumeGroup(ctx, req.(*DeleteVolumeGroupOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_CollectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMetricsOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CollectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Controller/CollectMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CollectMetrics(ctx, req.(*CollectMetricsOpts))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Controller_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Controller_DeleteVolume_Handler,
		},
		{
			MethodName: "ExtendVolume",
			Handler:    _Controller_ExtendVolume_Handler,
		},
		{
			MethodName: "CreateVolumeSnapshot",
			Handler:    _Controller_CreateVolumeSnapshot_Handler,
		},
		{
			MethodName: "DeleteVolumeSnapshot",
			Handler:    _Controller_DeleteVolumeSnapshot_Handler,
		},
		{
			MethodName: "CreateVolumeAttachment",
			Handler:    _Controller_CreateVolumeAttachment_Handler,
		},
		{
			MethodName: "DeleteVolumeAttachment",
			Handler:    _Controller_DeleteVolumeAttachment_Handler,
		},
		{
			MethodName: "CreateReplication",
			Handler:    _Controller_CreateReplication_Handler,
		},
		{
			MethodName: "DeleteReplication",
			Handler:    _Controller_DeleteReplication_Handler,
		},
		{
			MethodName: "EnableReplication",
			Handler:    _Controller_EnableReplication_Handler,
		},
		{
			MethodName: "DisableReplication",
			Handler:    _Controller_DisableReplication_Handler,
		},
		{
			MethodName: "FailoverReplication",
			Handler:    _Controller_FailoverReplication_Handler,
		},
		{
			MethodName: "CreateVolumeGroup",
			Handler:    _Controller_CreateVolumeGroup_Handler,
		},
		{
			MethodName: "UpdateVolumeGroup",
			Handler:    _Controller_UpdateVolumeGroup_Handler,
		},
		{
			MethodName: "DeleteVolumeGroup",
			Handler:    _Controller_DeleteVolumeGroup_Handler,
		},
		{
			MethodName: "CollectMetrics",
			Handler:    _Controller_CollectMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// ProvisionDockClient is the client API for ProvisionDock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProvisionDockClient interface {
	// Create a volume
	CreateVolume(ctx context.Context, in *CreateVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a volume
	DeleteVolume(ctx context.Context, in *DeleteVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Extend a volume
	ExtendVolume(ctx context.Context, in *ExtendVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(ctx context.Context, in *CreateVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(ctx context.Context, in *DeleteVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a volume attachment
	CreateVolumeAttachment(ctx context.Context, in *CreateVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(ctx context.Context, in *DeleteVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a replication
	CreateReplication(ctx context.Context, in *CreateReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete a replication
	DeleteReplication(ctx context.Context, in *DeleteReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Enable a replication
	EnableReplication(ctx context.Context, in *EnableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Disable a replication
	DisableReplication(ctx context.Context, in *DisableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Failover a replication
	FailoverReplication(ctx context.Context, in *FailoverReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Create a volume group
	CreateVolumeGroup(ctx context.Context, in *CreateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Update volume group
	UpdateVolumeGroup(ctx context.Context, in *UpdateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Delete volume group
	DeleteVolumeGroup(ctx context.Context, in *DeleteVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	CollectMetrics(ctx context.Context, in *CollectMetricsOpts, opts ...grpc.CallOption) (*GenericResponse, error)
}

type provisionDockClient struct {
	cc *grpc.ClientConn
}

func NewProvisionDockClient(cc *grpc.ClientConn) ProvisionDockClient {
	return &provisionDockClient{cc}
}

func (c *provisionDockClient) CreateVolume(ctx context.Context, in *CreateVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) DeleteVolume(ctx context.Context, in *DeleteVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) ExtendVolume(ctx context.Context, in *ExtendVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/ExtendVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) CreateVolumeSnapshot(ctx context.Context, in *CreateVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/CreateVolumeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) DeleteVolumeSnapshot(ctx context.Context, in *DeleteVolumeSnapshotOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/DeleteVolumeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) CreateVolumeAttachment(ctx context.Context, in *CreateVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/CreateVolumeAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) DeleteVolumeAttachment(ctx context.Context, in *DeleteVolumeAttachmentOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/DeleteVolumeAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) CreateReplication(ctx context.Context, in *CreateReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/CreateReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) DeleteReplication(ctx context.Context, in *DeleteReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/DeleteReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) EnableReplication(ctx context.Context, in *EnableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/EnableReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) DisableReplication(ctx context.Context, in *DisableReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/DisableReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) FailoverReplication(ctx context.Context, in *FailoverReplicationOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/FailoverReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) CreateVolumeGroup(ctx context.Context, in *CreateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/CreateVolumeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) UpdateVolumeGroup(ctx context.Context, in *UpdateVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/UpdateVolumeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) DeleteVolumeGroup(ctx context.Context, in *DeleteVolumeGroupOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/DeleteVolumeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionDockClient) CollectMetrics(ctx context.Context, in *CollectMetricsOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvisionDock/CollectMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionDockServer is the server API for ProvisionDock service.
type ProvisionDockServer interface {
	// Create a volume
	CreateVolume(context.Context, *CreateVolumeOpts) (*GenericResponse, error)
	// Delete a volume
	DeleteVolume(context.Context, *DeleteVolumeOpts) (*GenericResponse, error)
	// Extend a volume
	ExtendVolume(context.Context, *ExtendVolumeOpts) (*GenericResponse, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(context.Context, *CreateVolumeSnapshotOpts) (*GenericResponse, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(context.Context, *DeleteVolumeSnapshotOpts) (*GenericResponse, error)
	// Create a volume attachment
	CreateVolumeAttachment(context.Context, *CreateVolumeAttachmentOpts) (*GenericResponse, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(context.Context, *DeleteVolumeAttachmentOpts) (*GenericResponse, error)
	// Create a replication
	CreateReplication(context.Context, *CreateReplicationOpts) (*GenericResponse, error)
	// Delete a replication
	DeleteReplication(context.Context, *DeleteReplicationOpts) (*GenericResponse, error)
	// Enable a replication
	EnableReplication(context.Context, *EnableReplicationOpts) (*GenericResponse, error)
	// Disable a replication
	DisableReplication(context.Context, *DisableReplicationOpts) (*GenericResponse, error)
	// Failover a replication
	FailoverReplication(context.Context, *FailoverReplicationOpts) (*GenericResponse, error)
	// Create a volume group
	CreateVolumeGroup(context.Context, *CreateVolumeGroupOpts) (*GenericResponse, error)
	// Update volume group
	UpdateVolumeGroup(context.Context, *UpdateVolumeGroupOpts) (*GenericResponse, error)
	// Delete volume group
	DeleteVolumeGroup(context.Context, *DeleteVolumeGroupOpts) (*GenericResponse, error)
	CollectMetrics(context.Context, *CollectMetricsOpts) (*GenericResponse, error)
}

// UnimplementedProvisionDockServer can be embedded to have forward compatible implementations.
type UnimplementedProvisionDockServer struct {
}

func (*UnimplementedProvisionDockServer) CreateVolume(ctx context.Context, req *CreateVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (*UnimplementedProvisionDockServer) DeleteVolume(ctx context.Context, req *DeleteVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (*UnimplementedProvisionDockServer) ExtendVolume(ctx context.Context, req *ExtendVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendVolume not implemented")
}
func (*UnimplementedProvisionDockServer) CreateVolumeSnapshot(ctx context.Context, req *CreateVolumeSnapshotOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeSnapshot not implemented")
}
func (*UnimplementedProvisionDockServer) DeleteVolumeSnapshot(ctx context.Context, req *DeleteVolumeSnapshotOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeSnapshot not implemented")
}
func (*UnimplementedProvisionDockServer) CreateVolumeAttachment(ctx context.Context, req *CreateVolumeAttachmentOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeAttachment not implemented")
}
func (*UnimplementedProvisionDockServer) DeleteVolumeAttachment(ctx context.Context, req *DeleteVolumeAttachmentOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeAttachment not implemented")
}
func (*UnimplementedProvisionDockServer) CreateReplication(ctx context.Context, req *CreateReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplication not implemented")
}
func (*UnimplementedProvisionDockServer) DeleteReplication(ctx context.Context, req *DeleteReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplication not implemented")
}
func (*UnimplementedProvisionDockServer) EnableReplication(ctx context.Context, req *EnableReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableReplication not implemented")
}
func (*UnimplementedProvisionDockServer) DisableReplication(ctx context.Context, req *DisableReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableReplication not implemented")
}
func (*UnimplementedProvisionDockServer) FailoverReplication(ctx context.Context, req *FailoverReplicationOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailoverReplication not implemented")
}
func (*UnimplementedProvisionDockServer) CreateVolumeGroup(ctx context.Context, req *CreateVolumeGroupOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeGroup not implemented")
}
func (*UnimplementedProvisionDockServer) UpdateVolumeGroup(ctx context.Context, req *UpdateVolumeGroupOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolumeGroup not implemented")
}
func (*UnimplementedProvisionDockServer) DeleteVolumeGroup(ctx context.Context, req *DeleteVolumeGroupOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeGroup not implemented")
}
func (*UnimplementedProvisionDockServer) CollectMetrics(ctx context.Context, req *CollectMetricsOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectMetrics not implemented")
}

func RegisterProvisionDockServer(s *grpc.Server, srv ProvisionDockServer) {
	s.RegisterService(&_ProvisionDock_serviceDesc, srv)
}

func _ProvisionDock_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).CreateVolume(ctx, req.(*CreateVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).DeleteVolume(ctx, req.(*DeleteVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_ExtendVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).ExtendVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/ExtendVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).ExtendVolume(ctx, req.(*ExtendVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_CreateVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeSnapshotOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).CreateVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/CreateVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).CreateVolumeSnapshot(ctx, req.(*CreateVolumeSnapshotOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_DeleteVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeSnapshotOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).DeleteVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/DeleteVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).DeleteVolumeSnapshot(ctx, req.(*DeleteVolumeSnapshotOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_CreateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeAttachmentOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).CreateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/CreateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).CreateVolumeAttachment(ctx, req.(*CreateVolumeAttachmentOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_DeleteVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeAttachmentOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).DeleteVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/DeleteVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).DeleteVolumeAttachment(ctx, req.(*DeleteVolumeAttachmentOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_CreateReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).CreateReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/CreateReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).CreateReplication(ctx, req.(*CreateReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_DeleteReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).DeleteReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/DeleteReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).DeleteReplication(ctx, req.(*DeleteReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_EnableReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).EnableReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/EnableReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).EnableReplication(ctx, req.(*EnableReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_DisableReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).DisableReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/DisableReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).DisableReplication(ctx, req.(*DisableReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_FailoverReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailoverReplicationOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).FailoverReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/FailoverReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).FailoverReplication(ctx, req.(*FailoverReplicationOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_CreateVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeGroupOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).CreateVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/CreateVolumeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).CreateVolumeGroup(ctx, req.(*CreateVolumeGroupOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_UpdateVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolumeGroupOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).UpdateVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/UpdateVolumeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).UpdateVolumeGroup(ctx, req.(*UpdateVolumeGroupOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_DeleteVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeGroupOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).DeleteVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/DeleteVolumeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).DeleteVolumeGroup(ctx, req.(*DeleteVolumeGroupOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionDock_CollectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMetricsOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionDockServer).CollectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvisionDock/CollectMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionDockServer).CollectMetrics(ctx, req.(*CollectMetricsOpts))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProvisionDock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProvisionDock",
	HandlerType: (*ProvisionDockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _ProvisionDock_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _ProvisionDock_DeleteVolume_Handler,
		},
		{
			MethodName: "ExtendVolume",
			Handler:    _ProvisionDock_ExtendVolume_Handler,
		},
		{
			MethodName: "CreateVolumeSnapshot",
			Handler:    _ProvisionDock_CreateVolumeSnapshot_Handler,
		},
		{
			MethodName: "DeleteVolumeSnapshot",
			Handler:    _ProvisionDock_DeleteVolumeSnapshot_Handler,
		},
		{
			MethodName: "CreateVolumeAttachment",
			Handler:    _ProvisionDock_CreateVolumeAttachment_Handler,
		},
		{
			MethodName: "DeleteVolumeAttachment",
			Handler:    _ProvisionDock_DeleteVolumeAttachment_Handler,
		},
		{
			MethodName: "CreateReplication",
			Handler:    _ProvisionDock_CreateReplication_Handler,
		},
		{
			MethodName: "DeleteReplication",
			Handler:    _ProvisionDock_DeleteReplication_Handler,
		},
		{
			MethodName: "EnableReplication",
			Handler:    _ProvisionDock_EnableReplication_Handler,
		},
		{
			MethodName: "DisableReplication",
			Handler:    _ProvisionDock_DisableReplication_Handler,
		},
		{
			MethodName: "FailoverReplication",
			Handler:    _ProvisionDock_FailoverReplication_Handler,
		},
		{
			MethodName: "CreateVolumeGroup",
			Handler:    _ProvisionDock_CreateVolumeGroup_Handler,
		},
		{
			MethodName: "UpdateVolumeGroup",
			Handler:    _ProvisionDock_UpdateVolumeGroup_Handler,
		},
		{
			MethodName: "DeleteVolumeGroup",
			Handler:    _ProvisionDock_DeleteVolumeGroup_Handler,
		},
		{
			MethodName: "CollectMetrics",
			Handler:    _ProvisionDock_CollectMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// AttachDockClient is the client API for AttachDock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttachDockClient interface {
	// Attach a volume
	AttachVolume(ctx context.Context, in *AttachVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
	// Detach a volume
	DetachVolume(ctx context.Context, in *DetachVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error)
}

type attachDockClient struct {
	cc *grpc.ClientConn
}

func NewAttachDockClient(cc *grpc.ClientConn) AttachDockClient {
	return &attachDockClient{cc}
}

func (c *attachDockClient) AttachVolume(ctx context.Context, in *AttachVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.AttachDock/AttachVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachDockClient) DetachVolume(ctx context.Context, in *DetachVolumeOpts, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/proto.AttachDock/DetachVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachDockServer is the server API for AttachDock service.
type AttachDockServer interface {
	// Attach a volume
	AttachVolume(context.Context, *AttachVolumeOpts) (*GenericResponse, error)
	// Detach a volume
	DetachVolume(context.Context, *DetachVolumeOpts) (*GenericResponse, error)
}

// UnimplementedAttachDockServer can be embedded to have forward compatible implementations.
type UnimplementedAttachDockServer struct {
}

func (*UnimplementedAttachDockServer) AttachVolume(ctx context.Context, req *AttachVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachVolume not implemented")
}
func (*UnimplementedAttachDockServer) DetachVolume(ctx context.Context, req *DetachVolumeOpts) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachVolume not implemented")
}

func RegisterAttachDockServer(s *grpc.Server, srv AttachDockServer) {
	s.RegisterService(&_AttachDock_serviceDesc, srv)
}

func _AttachDock_AttachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachDockServer).AttachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AttachDock/AttachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachDockServer).AttachVolume(ctx, req.(*AttachVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachDock_DetachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachVolumeOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachDockServer).DetachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AttachDock/DetachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachDockServer).DetachVolume(ctx, req.(*DetachVolumeOpts))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttachDock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AttachDock",
	HandlerType: (*AttachDockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachVolume",
			Handler:    _AttachDock_AttachVolume_Handler,
		},
		{
			MethodName: "DetachVolume",
			Handler:    _AttachDock_DetachVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}
